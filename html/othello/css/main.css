:root {
  --board-size: 40px;
}
body {
  position: absolute;
  height: 100%;
  width: 100%;
}
#othello-area {
  position: absolute;
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: flex-start;
  flex-direction: column;
  align-items: center;
}
#othello-board {
  width: calc(var(--board-size) * 8);
  height: calc(var(--board-size) * 8);
  display: inline-block;
  flex-direction: column;
  flex-wrap: wrap;
}
.board-row {
  position: relative;
  display: flex;
  flex-direction: row;
  margin: 0px;
  padding: 0px;
  width: 100%;
  height: var(--board-size);
}
#othello-board .board-row:first-child > .board {
  border-top: 2px solid black;
}
#othello-board .board-row:last-child > .board {
  border-bottom: 2px solid black;
}
.board-row .board:first-child {
  border-left: 2px solid black;
}
.board-row .board:last-child {
  border-right: 2px solid black;
}

.board {
  box-sizing: border-box;
  position: relative;
  height: var(--board-size);
  width: var(--board-size);
  background-color: green;
  border: 1px solid black;
  pointer-events: none;
}

.put-ok {
  filter: opacity(0.6);
  pointer-events: all;
}
.board:hover {
  filter: brightness(70%) hue-rotate(0deg);
}
.piece {
  position: relative;
  top: 25%;
  left: 25%;
}

.white {
  position: absolute;
  width: calc((var(--board-size) / 2));
  height: calc((var(--board-size) / 2));
  top: 0%;
  left: 0%;
  background-color: white;
  border-radius: 50%;
  animation-play-state: paused;
  transform: translateZ(0px);

  /* display: none; 消す */
}

.side {
  position: absolute;
  width: calc((var(--board-size) / 2));
  top: calc((var(--board-size)) / 2 / 2);
  height: 3px;
  z-index: 0;
  background: linear-gradient(to bottom, white 50%, black 50%);
  transform: rotateX(90deg);
  transform-origin: 50% 0;

  animation-play-state: paused;
}

.black {
  /* display: none; 消す */

  position: absolute;
  top: 0%;
  left: 0%;
  width: calc((var(--board-size) / 2));
  height: calc((var(--board-size) / 2));
  background: black;
  border-radius: 50%;
  transform: translateZ(3px);
  animation-play-state: paused;
}

.piece[white] .white {
  z-index: 3;
}
.piece[black] .black {
  z-index: 3;
}
.piece[black] .side {
  transform: rotateX(270deg);
}
.piece[white][reverse] .white {
  animation: white-reverse-to-white 1s linear forwards;
}

.piece[white][reverse] .side {
  animation: white-reverse-side 1s linear forwards;
}
.piece[white][reverse] .black {
  animation: white-reverse-to-black 1s linear forwards;
}

.piece[black][reverse] .white {
  animation: black-reverse-to-white 1s linear forwards;
}
.piece[black][reverse] .side {
  animation: black-reverse-side 1s linear forwards;
}
.piece[black][reverse] .black {
  animation: black-reverse-to-black 1s linear forwards;
}

/* 白 → 黒のアニメーション */

@keyframes black-reverse-to-white {
  0% {
    transform: rotateX(0deg);
    z-index: 1;
  }
  100% {
    transform: rotateX(180deg);
    z-index: 2;
  }
}
@keyframes black-reverse-to-black {
  0% {
    transform: rotateX(0deg) translateZ(3px);
    z-index: 2;
  }
  100% {
    transform: rotateX(180deg) translateZ(3px);
    z-index: 1;
  }
}
@keyframes black-reverse-side {
  0% {
    transform: rotateX(90deg);
  }
  100% {
    transform: rotateX(270deg);
  }
}

/* 黒 → 白のアニメーション */
@keyframes white-reverse-to-white {
  0% {
    transform: rotateX(180deg);
    z-index: 2;
  }
  100% {
    transform: rotateX(0deg);
    z-index: 1;
  }
}
@keyframes white-reverse-to-black {
  0% {
    transform: rotateX(180deg) translateZ(3px);
    z-index: 1;
  }
  100% {
    transform: rotateX(0deg) translateZ(3px);
    z-index: 2;
  }
}
@keyframes white-reverse-side {
  0% {
    transform: rotateX(270deg);
  }
  100% {
    transform: rotateX(90deg);
  }
}

.piece:not([init]):not([reverse])[white] .white {
  animation: black-reverse-to-white 1s linear forwards;
}

.piece:not([init]):not([reverse])[white] .side {
  animation: black-reverse-side 1s linear forwards;
}
.piece:not([init]):not([reverse])[white] .black {
  animation: black-reverse-to-black 1s linear forwards;
}

.piece:not([init]):not([reverse])[black] .white {
  animation: white-reverse-to-white 1s linear forwards;
}

.piece:not([init]):not([reverse])[black] .side {
  animation: white-reverse-side 1s linear forwards;
}
.piece:not([init]):not([reverse])[black] .black {
  animation: white-reverse-to-black 1s linear forwards;
}

/* 勝敗関係の表示 */
#result {
  position: relative;
  width: calc(var(--board-size) * 8);
  height: calc(var(--board-size) * 3);
}
.othello-result {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

#victory {
  color: red;
  visibility: hidden;
}

#lose {
  color: blue;
  visibility: hidden;
}
#draw {
  color: black;
  visibility: hidden;
}
#result[victory] #victory {
  visibility: visible;
}

#result[lose] #lose {
  visibility: visible;
}

#result[draw] #draw {
  visibility: visible;
}

#skip {
  opacity: 0;
}

#result[skip] #skip {
  animation: skipAnimation 1s ease-out;
}

@keyframes skipAnimation {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* 設定関連 */

#settings-area {
  background-color: rgb(218, 218, 218);
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 10px;
}

#game-start {
  width: 100%;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
}

#game-start-btn {
  color: black;
  background-color: #ffffff;
  border-bottom: 5px solid #dddddd;
  -webkit-box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3);
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3);
}

#game-start-btn:hover {
  margin-top: 3px;
  color: black;
  background: #a5a5a5;
  border-bottom: 2px solid #b9b9b9;
}

#game-start-btn[start] {
  pointer-events: none;
  filter: brightness(0.5);
}

/* iPhoneのsafariで表示がバグる(z-indexが効かないのでtranslateZ(3px)で位置を変える) */
@media only screen and (max-width: 767px) {
  .piece[white] .white {
    transform: translateZ(3px);
  }
  .piece[black] .black {
    transform: translateZ(3px);
  }
  #othello-area {
    transform: translateZ(-50px);
  }
}

.note {
  background-color: #ff000080;
}
