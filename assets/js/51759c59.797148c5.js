"use strict";(self.webpackChunkstudy_doxs=self.webpackChunkstudy_doxs||[]).push([[2062],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),b=i,m=d["".concat(o,".").concat(b)]||d[b]||c[b]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),i=n(86010);const a="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(a,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>x});var r=n(87462),i=n(67294),a=n(86010),s=n(12466),l=n(16550),o=n(91980),u=n(67392),p=n(50012);function c(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}function d(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(a),(0,i.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=d(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[o,u]=m({queryString:n,groupId:r}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,p.Nk)(n);return[r,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),h=(()=>{const e=o??c;return b({value:e,tabValues:a})?e:null})();(0,i.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!b({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var h=n(72389);const g="tabList__CuJ",y="tabItem_LNqP";function T(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==l&&(c(t),o(r))},b=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:b,onClick:d},s,{className:(0,a.Z)("tabs__item",y,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=f(e);return i.createElement("div",{className:(0,a.Z)("tabs-container",g)},i.createElement(T,(0,r.Z)({},e,t)),i.createElement(_,(0,r.Z)({},e,t)))}function x(e){const t=(0,h.Z)();return i.createElement(v,(0,r.Z)({key:String(t)},e))}},3214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var r=n(87462),i=(n(67294),n(3905)),a=n(74866),s=n(85162);const l={title:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",sidebar_label:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},o=void 0,u={unversionedId:"Cryptography/classical-cipher/simple-substitution-cipher",id:"Cryptography/classical-cipher/simple-substitution-cipher",title:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",description:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u3068\u306f",source:"@site/docs/02-Cryptography/00-classical-cipher/04-simple-substitution-cipher.md",sourceDirName:"02-Cryptography/00-classical-cipher",slug:"/Cryptography/classical-cipher/simple-substitution-cipher",permalink:"/study-docs/docs/Cryptography/classical-cipher/simple-substitution-cipher",draft:!1,editUrl:"https://github.com/koseki2580/study-docs/edit/main/docs/02-Cryptography/00-classical-cipher/04-simple-substitution-cipher.md",tags:[{label:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/tags/\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{label:"\u53e4\u5178\u6697\u53f7",permalink:"/study-docs/docs/tags/\u53e4\u5178\u6697\u53f7"}],version:"current",lastUpdatedBy:"koseki2580",lastUpdatedAt:1697532336,formattedLastUpdatedAt:"2023\u5e7410\u670817\u65e5",sidebarPosition:4,frontMatter:{title:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",sidebar_label:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},sidebar:"CryptographySidebar",previous:{title:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",permalink:"/study-docs/docs/Cryptography/classical-cipher/transposition-cipher"}},p={},c=[{value:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u3068\u306f",id:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u3068\u306f",level:2},{value:"\u30d7\u30ed\u30b0\u30e9\u30e0",id:"\u30d7\u30ed\u30b0\u30e9\u30e0",level:3},{value:"\u52d5\u4f5c",id:"\u52d5\u4f5c",level:3}],d={toc:c};function b(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u3068\u306f"},"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u3068\u306f"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\u63db\u5b57\u5f0f\u6697\u53f7"),"\u3068\u306f\u5e73\u6587\u306e 1 \u6587\u5b57\u307e\u305f\u306f\u6570\u6587\u5b57\u5358\u4f4d\u3067\u5225\u306e\u6587\u5b57\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u5909\u63db\u3059\u308b\u6697\u53f7\u306e\u3053\u3068\u3092\u8a00\u3046\u3002\n\u5358\u4e00\u3068\u3042\u308b\u306e\u3067\u5909\u63db\u8868\u3092 1 \u3064\u3060\u3051\u4f7f\u7528\u3057\u3066\u6697\u53f7\u5316\u3092\u884c\u3046\u3002"),(0,i.kt)("h3",{id:"\u30d7\u30ed\u30b0\u30e9\u30e0"},"\u30d7\u30ed\u30b0\u30e9\u30e0"),(0,i.kt)(a.Z,{groupId:"code",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="simple-substitution-cipher.py"',title:'"simple-substitution-cipher.py"'},'def generate_simple_substitution_table():\n    base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n    table = [i for i in base]\n    random.shuffle(table)\n    return "".join(table)\n\n\ndef simple_substitution_cipher(input_text: str, transposition_table: str, direction: str = "encryption"):\n    input_text = input_text.upper()\n    base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\n    result = []\n    if direction == "decryption":\n        transposition_table, base = base, transposition_table\n    for i in range(len(input_text)):\n        result.append(transposition_table[base.index(input_text[i])])\n    return "".join(result)\n'))),(0,i.kt)(s.Z,{value:"C++",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="simple-substitution-cipher.cpp"',title:'"simple-substitution-cipher.cpp"'},'\nstring generateSimpleSubstitutionTable()\n{\n    string base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    vector<char> table(base.begin(), base.end());\n\n    random_device get_rand_dev;\n\n    std::mt19937_64 get_rand_mt(get_rand_dev());\n    std::shuffle(table.begin(), table.end(), get_rand_mt);\n    string result(table.begin(), table.end());\n\n    return result;\n}\nstring simpleSubstitutionCipher(string inputText, string transpositionTable, string direction = "encryption")\n{\n    transform(inputText.begin(), inputText.end(), inputText.begin(), ::toupper);\n    string base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    if (direction == "decryption")\n        swap(base, transpositionTable);\n    string retText;\n    for (int i = 0; i < inputText.size(); ++i)\n    {\n        retText += transpositionTable[base.find(inputText[i])];\n    }\n    return retText;\n}\n'))),(0,i.kt)(s.Z,{value:"C#",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="simple-substitution-cipher.cs"',title:'"simple-substitution-cipher.cs"'},'private static String GenerateSimpleSubstitutionTable()\n{\n    String _base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    char[] chars = _base.ToCharArray();\n    return new string(chars.OrderBy(i => Guid.NewGuid()).ToArray());\n}\n\nprivate static String SimpleSubstitutionCipher(\n    String inputText,\n    String transpositionTable,\n    String direction = "encryption"\n)\n{\n    inputText.ToUpper();\n    String _base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    if (direction == "decryption")\n    {\n        (_base, transpositionTable) = (transpositionTable, _base);\n    }\n    StringBuilder retText = new StringBuilder();\n    for (int i = 0; i < inputText.Length; ++i)\n    {\n        retText.Append(transpositionTable[_base.IndexOf(inputText[i])]);\n    }\n    return retText.ToString();\n}\n'))),(0,i.kt)(s.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"rand \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="simple-substitution-cipher.rs"',title:'"simple-substitution-cipher.rs"'},'fn generate_simple_substitution_table() -> String{\n    let base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    let mut chars: Vec<char> = base.chars().collect();\n    chars.shuffle(&mut rand::thread_rng());\n\n    chars.iter().collect()\n}\n\nfn  simple_substitution_cipher_to_encryption(input_text:String, transposition_table:String ) -> String {\n    let input_text_upper = input_text.to_uppercase();\n    let base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    let mut ret_text = String::new();\n    for i in 0..input_text_upper.len(){\n        let pos =  base.find(input_text_upper.chars().nth(i).unwrap()).unwrap();\n        ret_text.push(transposition_table.chars().nth(pos).unwrap());\n    }\n    ret_text.to_string()\n}\n\nfn  simple_substitution_cipher_to_decryption(input_text:String, transposition_table:String) -> String {\n    let input_text_upper = input_text.to_uppercase();\n    let base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    let mut ret_text = String::new();\n    for i in 0..input_text_upper.len(){\n        let pos =  transposition_table.find(input_text_upper.chars().nth(i).unwrap()).unwrap();\n        ret_text.push(base.chars().nth(pos).unwrap());\n    }\n    ret_text.to_string()\n}\n'))),(0,i.kt)(s.Z,{value:"JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="simple-substitution-cipher.js"',title:'"simple-substitution-cipher.js"'},'//Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; --i) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // \u8981\u7d20\u306e\u4ea4\u63db\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generateSimpleSubstitutionTable() {\n  const base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n  const chars = base.split("");\n  shuffleArray(chars);\n  return chars;\n}\n\nfunction simpleSubstitutionCipher(\n  inputText,\n  transpositionTable,\n  direction = "encryption"\n) {\n  inputText = inputText.toUpperCase();\n  const base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n  let retText = "";\n  let _base = base;\n  let _transpositionTable = transpositionTable;\n  if (direction == "decryption") {\n    _transpositionTable = base;\n    _base = transpositionTable;\n  }\n  for (let i = 0; i < inputText.length; ++i) {\n    retText += _transpositionTable[_base.indexOf(inputText[i])];\n  }\n  return retText;\n}\n')))),(0,i.kt)("h3",{id:"\u52d5\u4f5c"},"\u52d5\u4f5c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SimpleSubstitutionCipher(props) {\n  // \u6697\u53f7\u5316 or \u5fa9\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n  const inputText = "APPLE";\n\n  // encryption or decryption\n  const direction = "encryption";\n\n  // \u4ee5\u4e0b\u306f\u7279\u306b\u5909\u66f4\u3057\u306a\u304f\u3066\u826f\u3044\n  const base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\n  //Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; --i) {\n      const j = Math.floor(Math.random() * (i + 1));\n      // \u8981\u7d20\u306e\u4ea4\u63db\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  function generateSimpleSubstitutionTable() {\n    const chars = base.split("");\n    shuffleArray(chars);\n    return chars;\n  }\n  function simpleSubstitutionCipher(\n    inputText,\n    transpositionTable,\n    direction = "encryption"\n  ) {\n    inputText = inputText.toUpperCase();\n    let retText = "";\n    let _base = base;\n    let _transpositionTable = transpositionTable;\n    if (direction == "decryption") {\n      _transpositionTable = base;\n      _base = transpositionTable;\n    }\n    for (let i = 0; i < inputText.length; ++i) {\n      retText += _transpositionTable[_base.indexOf(inputText[i])];\n    }\n    return retText;\n  }\n\n  // React\n  const [table, setTable] = useState(undefined);\n  const [cipher, setCipher] = useState(undefined);\n\n  // table\u304c\u751f\u6210\u3055\u308c\u305f\u5f8c\u306b\u6697\u53f7\u5316\u3092\u884c\u3046\n  useEffect(() => {\n    if (!table) return;\n    const cipher = simpleSubstitutionCipher(inputText, table, "encryption");\n    setCipher(cipher);\n  }, [table]);\n  // \u8aad\u307f\u8fbc\u307f\u6642\u306b\u4e00\u5ea6\u3060\u3051\u547c\u3073\u51fa\u3059\n  useEffect(() => {\n    // \u8aad\u307f\u8fbc\u307f\u3067\u304d\u3066\u304b\u3089\u547c\u3073\u3060\u3059\n    setTable(generateSimpleSubstitutionTable());\n  }, []);\n  return (\n    <>\n      <div\n        style={{\n          display: "flex",\n          flexDirection: "row",\n          flexWrap: "nowrap",\n          alignItems: "flex-start",\n          justifyContent: "space-evenly",\n        }}\n      >\n        <div>\n          <h3>\u5143\u306e\u6587\u5b57\u5217</h3>\n          <p>{inputText}</p>\n        </div>\n        {table === undefined || cipher === undefined ? (\n          /* \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3057\u3066\u308b\u304b\u3064\u6697\u53f7\u5316\u6e08\u307f\u3067\u3042\u308c\u3070\u8868\u793a */ <></>\n        ) : (\n          <>\n            <span\n              className="mrel"\n              style={{ padding: "5px", margin: "auto 0px" }}\n            >\n              \u2192\n            </span>\n            <div>\n              <h3>\u6697\u53f7\u5316</h3>\n              <p>{cipher}</p>\n            </div>\n            <span\n              className="mrel"\n              style={{ padding: "5px", margin: "auto 0px" }}\n            >\n              \u2192\n            </span>\n            <div>\n              <h3>\u5fa9\u53f7\u5316</h3>\n              <p style={{ padding: "1px", margin: "2px" }}>\n                {simpleSubstitutionCipher(cipher, table, "decryption")}\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n      <h3>\u5909\u63db\u30c6\u30fc\u30d6\u30eb</h3>\n      {table === undefined || cipher === undefined ? (\n        /* \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3057\u3066\u308b\u304b\u3064\u6697\u53f7\u5316\u6e08\u307f\u3067\u3042\u308c\u3070\u8868\u793a */ <></>\n      ) : (\n        <p>{table}</p>\n      )}\n    </>\n  );\n}\n')))}b.isMDXComponent=!0}}]);