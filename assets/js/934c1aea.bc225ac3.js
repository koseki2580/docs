"use strict";(self.webpackChunkstudy_doxs=self.webpackChunkstudy_doxs||[]).push([[4792],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,f=d["".concat(o,".").concat(b)]||d[b]||c[b]||a;return n?i.createElement(f,s(s({ref:t},u),{},{components:n})):i.createElement(f,s({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<a;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(67294),r=n(86010);const a="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var i=n(87462),r=n(67294),a=n(86010),s=n(12466),l=n(16550),o=n(91980),p=n(67392),u=n(50012);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:r}}=e;return{value:t,label:n,attributes:i,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:a}))),[o,p]=f({queryString:n,groupId:i}),[c,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,u.Nk)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),g=(()=>{const e=o??c;return b({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),m(e)}),[p,m,a]),tabValues:a}}var g=n(72389);const h="tabList__CuJ",y="tabItem_LNqP";function T(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),i=p[n].value;i!==l&&(c(t),o(i))},b=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:b,onClick:d},s,{className:(0,a.Z)("tabs__item",y,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function x(e){const t=m(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",h)},r.createElement(T,(0,i.Z)({},e,t)),r.createElement(_,(0,i.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return r.createElement(x,(0,i.Z)({key:String(t)},e))}},42914:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var i=n(87462),r=(n(67294),n(3905)),a=n(74866),s=n(85162);const l={title:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",sidebar_label:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},o=void 0,p={unversionedId:"Cryptography/classical-cipher/transposition-cipher",id:"Cryptography/classical-cipher/transposition-cipher",title:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",description:"\u8ee2\u7f6e\u5f0f\u6697\u53f7\u3068\u306f",source:"@site/docs/02-Cryptography/00-classical-cipher/03-transposition-cipher.md",sourceDirName:"02-Cryptography/00-classical-cipher",slug:"/Cryptography/classical-cipher/transposition-cipher",permalink:"/study-docs/docs/Cryptography/classical-cipher/transposition-cipher",draft:!1,editUrl:"https://github.com/koseki2580/study-docs/edit/main/docs/02-Cryptography/00-classical-cipher/03-transposition-cipher.md",tags:[{label:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/tags/\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{label:"\u53e4\u5178\u6697\u53f7",permalink:"/study-docs/docs/tags/\u53e4\u5178\u6697\u53f7"}],version:"current",lastUpdatedBy:"koseki2580",lastUpdatedAt:1697349922,formattedLastUpdatedAt:"2023\u5e7410\u670815\u65e5",sidebarPosition:3,frontMatter:{title:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",sidebar_label:"\u8ee2\u7f6e\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},sidebar:"CryptographySidebar",previous:{title:"\u30b9\u30ad\u30e5\u30bf\u30ec\u30fc\u6697\u53f7",permalink:"/study-docs/docs/Cryptography/classical-cipher/scythia-cipher"}},u={},c=[{value:"\u8ee2\u7f6e\u5f0f\u6697\u53f7\u3068\u306f",id:"\u8ee2\u7f6e\u5f0f\u6697\u53f7\u3068\u306f",level:2},{value:"\u30d7\u30ed\u30b0\u30e9\u30e0",id:"\u30d7\u30ed\u30b0\u30e9\u30e0",level:3},{value:"\u52d5\u4f5c",id:"\u52d5\u4f5c",level:3}],d={toc:c};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u8ee2\u7f6e\u5f0f\u6697\u53f7\u3068\u306f"},"\u8ee2\u7f6e\u5f0f\u6697\u53f7\u3068\u306f"),(0,r.kt)("p",null,"\u5e73\u6587\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\u6697\u53f7\u65b9\u5f0f\u3092",(0,r.kt)("inlineCode",{parentName:"p"},"\u8ee2\u7f6e\u5f0f\u6697\u53f7"),"\u3068\u3044\u3046\u3002\n\u5e73\u6587\u3092\u4e00\u5b9a\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5206\u3051\u3066\u3001\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u304f\u3002\u30d6\u30ed\u30c3\u30af\u306e\u9577\u3055\u3092 n \u3068\u3059\u308b\u3068\u5e73\u6587\u306e\u6587\u5b57\u306e\u6570\u304c n \u306e\u5834\u5408\u6570\u51fa\u306a\u3044\u5834\u5408\u306f\u7dba\u9e97\u306b\u30d6\u30ed\u30c3\u30af\u5206\u3051\u304c\u3067\u304d\u306a\u3044\u3002\u4f59\u3063\u305f\u30d6\u30ed\u30c3\u30af\u306b\u306f\u4f55\u3089\u304b\u306e\u6587\u5b57\u3092\u5165\u308c\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3084\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u306a\u3044\u65b9\u6cd5\u7b49\u304c\u3042\u308b\u3002\n\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5834\u5408\u306f\u5358\u7d14\u306b\u30d1\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3057\u307e\u3046\u3068\u30d1\u30c6\u30a3\u30f3\u30b0\u6587\u5b57\u4ee5\u5916\u306e\u79fb\u52d5\u4f4d\u7f6e\u304c\u30d0\u30ec\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002"),(0,r.kt)("h3",{id:"\u30d7\u30ed\u30b0\u30e9\u30e0"},"\u30d7\u30ed\u30b0\u30e9\u30e0"),(0,r.kt)(a.Z,{groupId:"code",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="transposition-cipher.py"',title:'"transposition-cipher.py"'},'import random\ndef generate_transposition_table(size: int):\n    table = [i for i in range(size)]\n    random.shuffle(table)\n    return table\n\n\ndef transposition_cipher(input_text: str, transposition_table: list[int], direction: str = "encryption"):\n    input_text = input_text.upper()\n    result = []\n    size = len(transposition_table)\n    if direction == "decryption":\n        temp_table = [0] * size\n        for i in range(size):\n            temp_table[transposition_table[i]] = i\n        transposition_table = temp_table\n\n    for i in range(0, len(input_text) - size+1, size):\n        temp_text = ""\n        for j in range(size):\n            temp_text += input_text[i + transposition_table[j]]\n        result.append(temp_text)\n    if len(input_text) % size != 0:\n        result.append(\n            input_text[-(len(input_text) % size):]\n        )\n    return "".join(result)\n'))),(0,r.kt)(s.Z,{value:"C++",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="transposition-cipher.cpp"',title:'"transposition-cipher.cpp"'},'vector<int> generateTranspositionTable(int size)\n{\n    vector<int> table;\n    for (int i = 0; i < size; ++i)\n        table.push_back(i);\n    std::random_device get_rand_dev;\n\n    std::mt19937_64 get_rand_mt(get_rand_dev());\n    std::shuffle(table.begin(), table.end(), get_rand_mt);\n    return table;\n}\n\nstring transpositionCipher(string inputText, vector<int> transpositionTable, string direction = "encryption")\n{\n    transform(inputText.begin(), inputText.end(), inputText.begin(), ::toupper);\n    vector<string> result;\n    int size = transpositionTable.size();\n    if (direction == "decryption")\n    {\n        vector<int> tempTable(size, 0);\n        for (int i = 0; i < size; ++i)\n            tempTable[transpositionTable[i]] = i;\n        swap(transpositionTable, tempTable);\n    }\n    for (int i = 0; i < inputText.size() - size + 1; i += size)\n    {\n        string tempText = "";\n        for (int j = 0; j < size; ++j)\n            tempText += inputText[i + transpositionTable[j]];\n        result.push_back(tempText);\n    }\n    if (inputText.size() % size != 0)\n    {\n        result.push_back(inputText.substr(inputText.size() - (inputText.size() % size)));\n    }\n    std::ostringstream os;\n    std::copy(result.begin(), result.end(), std::ostream_iterator<std::string>(os));\n    return os.str();\n}\n'))),(0,r.kt)(s.Z,{value:"C#",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="transposition-cipher.cs"',title:'"transposition-cipher.cs"'},'static private int[] GenerateTranspositionTable(int size)\n{\n    int[] table = new int[size];\n    for (int i = 0; i < size; ++i)\n    {\n        table[i] = i;\n    }\n    return table.OrderBy(i => Guid.NewGuid()).ToArray();\n}\n\nstatic private string TranspositionCipher(\n    string inputText,\n    int[] transpositionTable,\n    string direction = "encryption"\n)\n{\n    inputText.ToUpper();\n    List<StringBuilder> result = new List<StringBuilder>();\n    int size = transpositionTable.Length;\n    if (direction == "decryption")\n    {\n        int[] tempTable = new int[size];\n        for (int i = 0; i < size; ++i)\n        {\n            tempTable[transpositionTable[i]] = i;\n        }\n        (transpositionTable, tempTable) = (tempTable, transpositionTable);\n    }\n    for (int i = 0; i < inputText.Length - size + 1; i += size)\n    {\n        StringBuilder tempText = new StringBuilder();\n        for (int j = 0; j < size; ++j)\n        {\n            tempText.Append(inputText[i + transpositionTable[j]]);\n        }\n        result.Add(tempText);\n    }\n    if (inputText.Length % size != 0)\n    {\n        result.Add(\n            new StringBuilder(\n                inputText.Substring(inputText.Length - (inputText.Length % size))\n            )\n        );\n    }\n    StringBuilder ret_string = new StringBuilder();\n    for (int i = 0; i < result.Count; ++i)\n    {\n        ret_string.Append(result[i]);\n    }\n    return ret_string.ToString();\n}\n'))),(0,r.kt)(s.Z,{value:"Rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"rand \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="transposition-cipher.rs"',title:'"transposition-cipher.rs"'},"use rand::seq::SliceRandom;\n\nfn  generate_transposition_table(size:usize) -> Vec<usize>{\n    let mut table = vec![0; size];\n    for i in 0..size{\n        table[i] = i;\n    }\n    let mut rng = rand::thread_rng();\n    table.shuffle(&mut rng);\n    table\n}\nfn transposition_cipher_to_encrypt(input_text:String, transposition_table:Vec<usize>) -> String{\n    let  input_text_upper = input_text.to_uppercase();\n    let mut result:Vec<String> = vec!();\n    let size = transposition_table.len();\n    for i in (0..( input_text.len() - size + 1)).step_by(size){\n        let mut temp_text = String::new();\n        for j in 0..size{\n            let pos = i + transposition_table[j];\n            temp_text += &input_text_upper[pos..pos+1];\n        }\n        result.push(temp_text);\n    }\n    if (input_text.len() % size != 0){\n        result.push((&(input_text_upper[input_text_upper.len() - (input_text_upper.len() % size)..])).to_string())\n    }\n    let mut ret_string = String::new();\n    for i in 0..result.len(){\n\n        ret_string += &result[i];\n    }\n    ret_string\n}\n\nfn transposition_cipher_to_decrypt(input_text:String, transposition_table:Vec<usize>) -> String{\n    let  input_text_upper = input_text.to_uppercase();\n    let mut result:Vec<String> = vec!();\n    let size = transposition_table.len();\n    let mut decrypt_transposition_table:Vec<usize> = vec![0; size];\n    for i in 0..size{\n        decrypt_transposition_table[transposition_table[i]] = i;\n    }\n    for i in (0..( input_text.len() - size + 1)).step_by(size){\n        let mut temp_text = String::new();\n        for j in 0..size{\n            let pos = i + decrypt_transposition_table[j];\n            temp_text += &input_text_upper[pos..pos+1];\n        }\n        result.push(temp_text);\n    }\n    if (input_text.len() % size != 0){\n        result.push((&(input_text_upper[input_text_upper.len() - (input_text_upper.len() % size)..])).to_string())\n    }\n    let mut ret_string = String::new();\n    for i in 0..result.len(){\n\n        ret_string += &result[i];\n    }\n    ret_string\n}\n"))),(0,r.kt)(s.Z,{value:"JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="transposition-cipher.js"',title:'"transposition-cipher.js"'},'//Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; --i) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // \u8981\u7d20\u306e\u4ea4\u63db\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generateTranspositionTable(size) {\n  let table = Array.from({ length: size }, (_, index) => index);\n  shuffleArray(table);\n  return table;\n}\n\nfunction transpositionCipher(\n  inputText,\n  transpositionTable,\n  direction = "encryption"\n) {\n  inputText.toUpperCase();\n  let result = [];\n  const size = transpositionTable.length;\n  if (direction === "decryption") {\n    let tempTable = new Array(size).fill(0);\n    for (let i = 0; i < size; ++i) {\n      tempTable[transpositionTable[i]] = i;\n    }\n    transpositionTable = tempTable;\n  }\n  for (let i = 0; i < inputText.length - size + 1; i += size) {\n    let tempText = "";\n    for (let j = 0; j < size; ++j) {\n      tempText += inputText[i + transpositionTable[j]];\n    }\n    result.push(tempText);\n  }\n  if (inputText.length % size !== 0) {\n    result.push(\n      inputText.substring(inputText.length - (inputText.length % size))\n    );\n  }\n  let ret_string = "";\n  for (let i = 0; i < result.length; ++i) {\n    ret_string += result[i];\n  }\n  return ret_string;\n}\n')))),(0,r.kt)("h3",{id:"\u52d5\u4f5c"},"\u52d5\u4f5c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function TranspositionCipher(props) {\n  // \u6697\u53f7\u5316 or \u5fa9\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n  const inputText = "APPLE";\n\n  // \u8ee2\u7f6e\u3059\u308b\u30d6\u30ed\u30c3\u30af\u6570\n  const size = 3;\n\n  // \u6697\u53f7\u5316 or \u5fa9\u53f7\u5316\n  const direction = "encryption";\n\n  //Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; --i) {\n      const j = Math.floor(Math.random() * (i + 1));\n      // \u8981\u7d20\u306e\u4ea4\u63db\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  function generateTranspositionTable(size) {\n    let table = Array.from({ length: size }, (_, index) => index);\n    shuffleArray(table);\n    return table;\n  }\n\n  function transpositionCipher(\n    inputText,\n    transpositionTable,\n    direction = "encryption"\n  ) {\n    inputText.toUpperCase();\n    let result = [];\n    const size = transpositionTable.length;\n    if (direction === "decryption") {\n      let tempTable = new Array(size).fill(0);\n      for (let i = 0; i < size; ++i) {\n        tempTable[transpositionTable[i]] = i;\n      }\n      transpositionTable = tempTable;\n    }\n    for (let i = 0; i < inputText.length - size + 1; i += size) {\n      let tempText = "";\n      for (let j = 0; j < size; ++j) {\n        tempText += inputText[i + transpositionTable[j]];\n      }\n      result.push(tempText);\n    }\n    if (inputText.length % size !== 0) {\n      result.push(\n        inputText.substring(inputText.length - (inputText.length % size))\n      );\n    }\n    let ret_string = "";\n    for (let i = 0; i < result.length; ++i) {\n      ret_string += result[i];\n    }\n    return ret_string;\n  }\n\n  // React\n  const [table, setTable] = useState(undefined);\n  const [cipher, setCipher] = useState(undefined);\n\n  // table\u304c\u751f\u6210\u3055\u308c\u305f\u5f8c\u306b\u6697\u53f7\u5316\u3092\u884c\u3046\n  useEffect(() => {\n    if (!table) return;\n    const cipher = transpositionCipher(inputText, table, "encryption");\n    setCipher(cipher);\n  }, [table]);\n  // \u8aad\u307f\u8fbc\u307f\u6642\u306b\u4e00\u5ea6\u3060\u3051\u547c\u3073\u51fa\u3059\n  useEffect(() => {\n    // \u8aad\u307f\u8fbc\u307f\u3067\u304d\u3066\u304b\u3089\u547c\u3073\u3060\u3059\n    setTable(generateTranspositionTable(size));\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: "flex",\n        flexDirection: "row",\n        flexWrap: "nowrap",\n        alignItems: "flex-start",\n        justifyContent: "space-evenly",\n      }}\n    >\n      <div>\n        <h3>\u5143\u306e\u6587\u5b57\u5217</h3>\n        <p>{inputText}</p>\n      </div>\n      {table === undefined || cipher === undefined ? (\n        /* \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3057\u3066\u308b\u304b\u3064\u6697\u53f7\u5316\u6e08\u307f\u3067\u3042\u308c\u3070\u8868\u793a */ <></>\n      ) : (\n        <>\n          <span className="mrel" style={{ padding: "5px", margin: "auto 0px" }}>\n            \u2192\n          </span>\n          <div style={{ overflowX: "scroll" }}>\n            <h3>\u6697\u53f7\u5316</h3>\n            <p>{cipher}</p>\n          </div>\n          <span className="mrel" style={{ padding: "5px", margin: "auto 0px" }}>\n            \u2192\n          </span>\n          <div>\n            <h3>\u5fa9\u53f7\u5316</h3>\n            <p style={{ padding: "1px", margin: "2px" }}>\n              {transpositionCipher(cipher, table, "decryption")}\n            </p>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n')))}b.isMDXComponent=!0}}]);