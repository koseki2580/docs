"use strict";(self.webpackChunkstudy_doxs=self.webpackChunkstudy_doxs||[]).push([[8382],{88563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var i=t(85893),r=t(11151),a=t(74866),s=t(85162);const l={title:"\u591a\u8868\u5f0f\u6697\u53f7",sidebar_label:"\u591a\u8868\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},o=void 0,u={id:"Cryptography/classical-cipher/polyalphabetic-substitution-cipher",title:"\u591a\u8868\u5f0f\u6697\u53f7",description:"\u591a\u8868\u5f0f\u6697\u53f7\u3068\u306f",source:"@site/docs/02-Cryptography/00-classical-cipher/05-polyalphabetic-substitution-cipher.md",sourceDirName:"02-Cryptography/00-classical-cipher",slug:"/Cryptography/classical-cipher/polyalphabetic-substitution-cipher",permalink:"/study-docs/docs/Cryptography/classical-cipher/polyalphabetic-substitution-cipher",draft:!1,unlisted:!1,editUrl:"https://github.com/koseki2580/study-docs/edit/main/docs/02-Cryptography/00-classical-cipher/05-polyalphabetic-substitution-cipher.md",tags:[{label:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/tags/\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{label:"\u53e4\u5178\u6697\u53f7",permalink:"/study-docs/docs/tags/\u53e4\u5178\u6697\u53f7"}],version:"current",lastUpdatedBy:"koseki2580",lastUpdatedAt:1697539853,formattedLastUpdatedAt:"2023\u5e7410\u670817\u65e5",sidebarPosition:5,frontMatter:{title:"\u591a\u8868\u5f0f\u6697\u53f7",sidebar_label:"\u591a\u8868\u5f0f\u6697\u53f7",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","\u53e4\u5178\u6697\u53f7"]},sidebar:"CryptographySidebar",previous:{title:"\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7",permalink:"/study-docs/docs/Cryptography/classical-cipher/simple-substitution-cipher"},next:{title:"\u30f4\u30a3\u30b8\u30e5\u30cd\u30eb\u6697\u53f7",permalink:"/study-docs/docs/Cryptography/classical-cipher/vigenere-cipher"}},c={},p=[{value:"\u591a\u8868\u5f0f\u6697\u53f7\u3068\u306f",id:"\u591a\u8868\u5f0f\u6697\u53f7\u3068\u306f",level:2},{value:"\u30d7\u30ed\u30b0\u30e9\u30e0",id:"\u30d7\u30ed\u30b0\u30e9\u30e0",level:3},{value:"\u52d5\u4f5c",id:"\u52d5\u4f5c",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\u591a\u8868\u5f0f\u6697\u53f7\u3068\u306f",children:"\u591a\u8868\u5f0f\u6697\u53f7\u3068\u306f"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\u591a\u8868\u5f0f\u6697\u53f7"}),"\u3067\u306f\u3001\u5e73\u6587\u3092 n \u6587\u5b57\u3054\u3068\u306b\u30d6\u30ed\u30c3\u30af\u5316\u3057\u3001\u5404\u30d6\u30ed\u30c3\u30af\u5185\u306e\u6587\u5b57\u306b\u5bfe\u3057\u3066\u7570\u306a\u308b\u63db\u5b57\u30ad\u30fc\u3092\u9069\u7528\u3059\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u540c\u3058\u6587\u5b57\u304c\u7570\u306a\u308b\u30d6\u30ed\u30c3\u30af\u5185\u3067\u7570\u306a\u308b\u65b9\u6cd5\u3067\u6697\u53f7\u5316\u3055\u308c\u3001\u89e3\u8aad\u304c\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,i.jsx)(n.h3,{id:"\u30d7\u30ed\u30b0\u30e9\u30e0",children:"\u30d7\u30ed\u30b0\u30e9\u30e0"}),"\n",(0,i.jsxs)(a.Z,{groupId:"code",children:[(0,i.jsx)(s.Z,{value:"python",label:"Python",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="polyalphabetic-substitution-cipher.py"',children:'import random\ndef generate_polyalphabetic_substitution_table(size: int):\n    base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n    result = []\n    table = [i for i in base]\n    for i in range(size):\n        random.shuffle(table)\n        result.append("".join(table))\n    return result\n\n\ndef polyalphabetic_substitution_cipher(input_text: str, transposition_table: list[str], direction: str = "encryption"):\n    input_text = input_text.upper()\n    mod = len(transposition_table)\n    base = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"] * mod\n\n    result = []\n    if direction == "decryption":\n        transposition_table, base = base, transposition_table\n    for i in range(len(input_text)):\n        result.append(transposition_table[i % mod]\n                      [base[i % mod].index(input_text[i])])\n    return "".join(result)\n'})})}),(0,i.jsx)(s.Z,{value:"C++",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="polyalphabetic-substitution-cipher.cpp"',children:'\nvector<string> generatePolyalphabeticSubstitutionTable(int size)\n{\n    string base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    vector<char> table(base.begin(), base.end());\n    vector<string> result;\n    random_device getRandDev;\n\n    std::mt19937_64 getRandMt(getRandDev());\n    for (int i = 0; i < size; ++i)\n    {\n\n        std::shuffle(table.begin(), table.end(), getRandMt);\n        string tempResult(table.begin(), table.end());\n        result.push_back(tempResult);\n    }\n\n    return result;\n}\nstring polyalphabeticSubstitutionCipher(string inputText, vector<string> transpositionTable, string direction = "encryption")\n{\n    transform(inputText.begin(), inputText.end(), inputText.begin(), ::toupper);\n    int mod = transpositionTable.size();\n    vector<string> base(mod, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");\n    if (direction == "decryption")\n        swap(base, transpositionTable);\n    string retText;\n    for (int i = 0; i < inputText.size(); ++i)\n    {\n        retText += transpositionTable[i % mod][base[i % mod].find(inputText[i])];\n    }\n    return retText;\n}\n'})})}),(0,i.jsx)(s.Z,{value:"C#",label:"C#",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="polyalphabetic-substitution-cipher.cs"',children:'private static String[] GeneratePolyalphabeticSubstitutionTable(int size)\n{\n    String _base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    char[] chars = _base.ToCharArray();\n    String[] result = new String[size];\n    for (int i = 0; i < size; ++i)\n    {\n        result[i] = new String(chars.OrderBy(i => Guid.NewGuid()).ToArray());\n    }\n    return result;\n}\n\nprivate static String PolyalphabeticSubstitutionCipher(\n    String inputText,\n    String[] transpositionTable,\n    String direction = "encryption"\n)\n{\n    inputText.ToUpper();\n    int mod = transpositionTable.Length;\n    String[] _base = new string[mod];\n    for (int i = 0; i < mod; ++i)\n    {\n        _base[i] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    }\n    if (direction == "decryption")\n    {\n        (_base, transpositionTable) = (transpositionTable, _base);\n    }\n    StringBuilder retText = new StringBuilder();\n    for (int i = 0; i < inputText.Length; ++i)\n    {\n        retText.Append(transpositionTable[i % mod][_base[i % mod].IndexOf(inputText[i])]);\n    }\n    return retText.ToString();\n}\n'})})}),(0,i.jsxs)(s.Z,{value:"Rust",label:"Rust",children:[(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"rand \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",metastring:'title="polyalphabetic-substitution-cipher.rs"',children:'fn generate_polyalphabetic_substitution_table(size:usize) -> Vec<String>{\n    let base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    let mut chars: Vec<char> = base.chars().collect();\n    let mut result: Vec<String> = vec![];\n    for i in 0..size{\n        chars.shuffle(&mut rand::thread_rng());\n        result.push(chars.iter().collect());\n    }\n    result\n}\n\nfn  polyalphabetic_substitution_cipher_to_encryption(input_text:String, transposition_table: Vec<String> ) -> String {\n    let input_text_upper = input_text.to_uppercase();\n    let _mod = transposition_table.len();\n    let base = vec!["ABCDEFGHIJKLMNOPQRSTUVWXYZ"; _mod];\n    let mut ret_text = String::new();\n    for i in 0..input_text_upper.len(){\n        let pos =  base[i % _mod].find(input_text_upper.chars().nth(i).unwrap()).unwrap();\n        ret_text.push(transposition_table[i % _mod].chars().nth(pos).unwrap());\n    }\n    ret_text.to_string()\n}\n\nfn  polyalphabetic_substitution_cipher_to_decryption(input_text:String, transposition_table: Vec<String>) -> String {\n    let input_text_upper = input_text.to_uppercase();\n    let _mod = transposition_table.len();\n    let base = vec!["ABCDEFGHIJKLMNOPQRSTUVWXYZ"; _mod];\n    let mut ret_text = String::new();\n    for i in 0..input_text_upper.len(){\n        let pos =  transposition_table[i % _mod].find(input_text_upper.chars().nth(i).unwrap()).unwrap();\n        ret_text.push(base[i % _mod].chars().nth(pos).unwrap());\n    }\n    ret_text.to_string()\n}\n'})})]}),(0,i.jsx)(s.Z,{value:"JavaScript",label:"JavaScript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="polyalphabetic-substitution-cipher.js"',children:'//Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; --i) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // \u8981\u7d20\u306e\u4ea4\u63db\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generatePolyalphabeticSubstitutionTable(size) {\n  let result = [];\n  for (let i = 0; i < size; ++i) {\n    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");\n    shuffleArray(chars);\n    result.push(chars);\n  }\n  return result;\n}\nfunction polyalphabeticSubstitutionCipher(\n  inputText,\n  transpositionTable,\n  direction = "encryption"\n) {\n  inputText = inputText.toUpperCase();\n  const mod = transpositionTable.length;\n  let retText = "";\n  let _base = new Array(mod).fill("ABCDEFGHIJKLMNOPQRSTUVWXYZ");\n  let _transpositionTable = transpositionTable;\n  if (direction == "decryption") {\n    _transpositionTable = new Array(mod).fill("ABCDEFGHIJKLMNOPQRSTUVWXYZ");\n    _base = transpositionTable;\n  }\n\n  for (let i = 0; i < inputText.length; ++i) {\n    retText +=\n      _transpositionTable[i % mod][_base[i % mod].indexOf(inputText[i])];\n  }\n  return retText;\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"\u52d5\u4f5c",children:"\u52d5\u4f5c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function SimpleSubstitutionCipher(props) {\n  // \u6697\u53f7\u5316 or \u5fa9\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n  const inputText = "APPLE";\n\n  // encryption or decryption\n  const direction = "encryption";\n\n  // \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u306e\u500b\u6570\n  const size = 3;\n\n  // \u4ee5\u4e0b\u306f\u7279\u306b\u5909\u66f4\u3057\u306a\u304f\u3066\u826f\u3044\n  const base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\n  //Fisher-Yates\u30b7\u30e3\u30c3\u30d5\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; --i) {\n      const j = Math.floor(Math.random() * (i + 1));\n      // \u8981\u7d20\u306e\u4ea4\u63db\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  function generatePolyalphabeticSubstitutionTable(size) {\n    let result = [];\n    for (let i = 0; i < size; ++i) {\n      const chars = base.split("");\n      shuffleArray(chars);\n      result.push(chars);\n    }\n    return result;\n  }\n  function polyalphabeticSubstitutionCipher(\n    inputText,\n    transpositionTable,\n    direction = "encryption"\n  ) {\n    inputText = inputText.toUpperCase();\n    const mod = transpositionTable.length;\n    let retText = "";\n    let _base = new Array(mod).fill(base);\n    let _transpositionTable = transpositionTable;\n    if (direction == "decryption") {\n      _transpositionTable = new Array(mod).fill(base);\n      _base = transpositionTable;\n    }\n\n    for (let i = 0; i < inputText.length; ++i) {\n      retText +=\n        _transpositionTable[i % mod][_base[i % mod].indexOf(inputText[i])];\n    }\n    return retText;\n  }\n\n  // React\n  const [table, setTable] = useState(undefined);\n  const [cipher, setCipher] = useState(undefined);\n\n  // table\u304c\u751f\u6210\u3055\u308c\u305f\u5f8c\u306b\u6697\u53f7\u5316\u3092\u884c\u3046\n  useEffect(() => {\n    if (!table) return;\n    const cipher = polyalphabeticSubstitutionCipher(\n      inputText,\n      table,\n      "encryption"\n    );\n    setCipher(cipher);\n  }, [table]);\n  // \u8aad\u307f\u8fbc\u307f\u6642\u306b\u4e00\u5ea6\u3060\u3051\u547c\u3073\u51fa\u3059\n  useEffect(() => {\n    // \u8aad\u307f\u8fbc\u307f\u3067\u304d\u3066\u304b\u3089\u547c\u3073\u3060\u3059\n    setTable(generatePolyalphabeticSubstitutionTable(size));\n  }, []);\n  return (\n    <>\n      <div\n        style={{\n          display: "flex",\n          flexDirection: "row",\n          flexWrap: "nowrap",\n          alignItems: "flex-start",\n          justifyContent: "space-evenly",\n        }}\n      >\n        <div>\n          <h3>\u5143\u306e\u6587\u5b57\u5217</h3>\n          <p>{inputText}</p>\n        </div>\n        {table === undefined || cipher === undefined ? (\n          /* \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3057\u3066\u308b\u304b\u3064\u6697\u53f7\u5316\u6e08\u307f\u3067\u3042\u308c\u3070\u8868\u793a */ <></>\n        ) : (\n          <>\n            <span\n              className="mrel"\n              style={{ padding: "5px", margin: "auto 0px" }}\n            >\n              \u2192\n            </span>\n            <div>\n              <h3>\u6697\u53f7\u5316</h3>\n              <p>{cipher}</p>\n            </div>\n            <span\n              className="mrel"\n              style={{ padding: "5px", margin: "auto 0px" }}\n            >\n              \u2192\n            </span>\n            <div>\n              <h3>\u5fa9\u53f7\u5316</h3>\n              <p style={{ padding: "1px", margin: "2px" }}>\n                {polyalphabeticSubstitutionCipher(cipher, table, "decryption")}\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n      <h3>\u5909\u63db\u30c6\u30fc\u30d6\u30eb</h3>\n      {table === undefined || cipher === undefined ? (\n        /* \u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\u3057\u3066\u308b\u304b\u3064\u6697\u53f7\u5316\u6e08\u307f\u3067\u3042\u308c\u3070\u8868\u793a */ <></>\n      ) : (\n        table.map((val) => {\n          return <p>{val}</p>;\n        })\n      )}\n    </>\n  );\n}\n'})})]})}function b(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>s});t(67294);var i=t(86010);const r={tabItem:"tabItem_Ymn6"};var a=t(85893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,s),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>v});var i=t(67294),r=t(86010),a=t(12466),s=t(16550),l=t(20469),o=t(91980),u=t(67392),c=t(50012);function p(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function b(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=d(e),[s,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[u,p]=h({queryString:t,groupId:r}),[f,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,c.Nk)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),g=(()=>{const e=u??f;return b({value:e,tabValues:a})?e:null})();(0,l.Z)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!b({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),m(e)}),[p,m,a]),tabValues:a}}var m=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(85893);function x(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.o5)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),r=l[t].value;r!==i&&(u(n),s(r))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>o.push(e),onKeyDown:p,onClick:c,...a,className:(0,r.Z)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function _(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function T(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,r.Z)("tabs-container",g.tabList),children:[(0,y.jsx)(x,{...e,...n}),(0,y.jsx)(_,{...e,...n})]})}function v(e){const n=(0,m.Z)();return(0,y.jsx)(T,{...e,children:p(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var i=t(67294);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);