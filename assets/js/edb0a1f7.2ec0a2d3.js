"use strict";(self.webpackChunkstudy_doxs=self.webpackChunkstudy_doxs||[]).push([[8270],{31347:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var s=t(85893),a=t(11151),i=t(74866),l=t(85162);const r={title:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5",sidebar_label:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]},c=void 0,o={id:"Search-Algorithm/alternate-move-game/primitive-monte-carlo",title:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5",description:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u306f",source:"@site/docs/04-Search-Algorithm/20-alternate-move-game/05-primitive-monte-carlo.md",sourceDirName:"04-Search-Algorithm/20-alternate-move-game",slug:"/Search-Algorithm/alternate-move-game/primitive-monte-carlo",permalink:"/study-docs/docs/Search-Algorithm/alternate-move-game/primitive-monte-carlo",draft:!1,unlisted:!1,editUrl:"https://github.com/koseki2580/study-docs/edit/main/docs/04-Search-Algorithm/20-alternate-move-game/05-primitive-monte-carlo.md",tags:[{label:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/tags/\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}],version:"current",lastUpdatedBy:"koseki2580",lastUpdatedAt:1702184829,formattedLastUpdatedAt:"2023\u5e7412\u670810\u65e5",sidebarPosition:5,frontMatter:{title:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5",sidebar_label:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]},sidebar:"Search-AlgorithmSidebar",previous:{title:"Alpha-Beta\u6cd5",permalink:"/study-docs/docs/Search-Algorithm/alternate-move-game/alpha-beta"}},d={},h=[{value:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u306f",id:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u306f",level:2},{value:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",id:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",level:3},{value:"\u30b3\u30fc\u30c9",id:"\u30b3\u30fc\u30c9",level:3},{value:"primitive_monte_carlo_action",id:"primitive_monte_carlo_action",level:4},{value:"\u5909\u66f4",id:"\u5909\u66f4",level:4},{value:"player",id:"player",level:5},{value:"c++\u3060\u3051",id:"c\u3060\u3051",level:5}];function m(e){const n={annotation:"annotation",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",math:"math",mn:"mn",mo:"mo",mover:"mover",mrow:"mrow",mstyle:"mstyle",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u306f",children:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u306f"}),"\n",(0,s.jsx)(n.p,{children:"\u7d71\u8a08\u7684\u306a\u624b\u6cd5\u3092\u7528\u3044\u3066\u554f\u984c\u3084\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u8fd1\u4f3c\u89e3\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u7528\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308a\u3001\n\u4e0e\u3048\u3089\u308c\u305f\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u306b\u304a\u3044\u3066\u6700\u9069\u306a\u884c\u52d5\u3092\u63a8\u5b9a\u3059\u308b\u305f\u3081\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u591a\u6570\u56de\u5b9f\u884c\u3059\u308b\u624b\u6cd5\u3067\u3042\u308b\u3002"}),"\n",(0,s.jsx)(n.h3,{id:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",children:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}),"\n",(0,s.jsx)(n.p,{children:"\u3042\u308b\u76e4\u9762\u304b\u3089\u6b21\u306e\u624b\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306b\u3001\u81ea\u5206\u3068\u76f8\u624b\u306e\u624b\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u3001\u30b2\u30fc\u30e0\u7d42\u4e86\u307e\u305f\u306f\u7279\u5b9a\u306e\u56de\u6570\u306e\u624b\u3092\u9078\u629e\u3059\u308b\u307e\u3067\u30b2\u30fc\u30e0\u3092\u9032\u3081\u3001\u305d\u306e\u6642\u70b9\u3067\u306e\u52dd\u6557\u3092\u8a18\u9332\u3059\u308b\u3002\n\u3053\u308c\u3092\u4f55\u5ea6\u3082\u884c\u3044\u3001\u6b21\u306e\u9078\u629e\u3067\u304d\u308b\u624b\u306e\u4e2d\u3067\u4e00\u756a\u52dd\u7387\u306e\u3044\u3044\u624b\u3092\u9078\u629e\u3057\u3066\u3044\u304f\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f8b\u3048\u3070\u3001\u3053\u306e\u76e4\u9762\u3067\u8a66\u884c\u304c 600 \u56de\u3067\u3042\u3063\u305f\u3068\u3059\u308b\u3002(\u5404\u624b\u3092 100 \u56de\u305a\u3064)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd51",src:t(60679).Z+"",width:"324",height:"324"})}),"\n",(0,s.jsx)(n.p,{children:"600 \u56de\u52dd\u6557\u304c\u3064\u304f\u307e\u3067\u7e70\u308a\u8fd4\u3057\u305f\u5f8c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u3063\u305f\u3068\u3059\u308b\u3002"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u76e4\u9762"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u52dd\u3061\u6570"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"1"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 1}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"1"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"40"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"2"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 2}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"2"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"33"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"3"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 3}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"3"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"56"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"4"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 4}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"4"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"65"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"5"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 5}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"5"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"12"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"6"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 6}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"6"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"32"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u5834\u5408\u306f\u5168\u3066\u540c\u3058\u56de\u6570\u8a66\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u756a\u52dd\u5229\u6570\u304c\u5927\u304d\u3044",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"4"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 4}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"4"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]}),"\u306e\u624b\u3092\u6b21\u306e\u624b\u3068\u3057\u3066\u9078\u629e\u3059\u308b\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u3088\u3046\u306b\u6b21\u306b\u53d6\u308c\u308b\u624b\u304b\u3089\u3001\u304a\u4e92\u3044\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u624b\u3092\u9078\u629e\u3059\u308b\u3068\u3057\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u3001\u4e00\u756a\u52dd\u7387\u306e\u9ad8\u3044\u624b\u3092\u9078\u629e\u3057\u3066\u3044\u304f\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u52dd\u3061 1, \u5f15\u304d\u5206\u3051 0.5, \u8ca0\u3051 0 \u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b\u65b9\u6cd5\u3084\u52dd\u3061 1, \u5f15\u304d\u5206\u3051 0, \u8ca0\u3051 -1 \u3068\u3057\u305f\u308a\u3068\u69d8\u3005\u306a\u5024\u306e\u53d6\u308a\u65b9\u3082\u5b58\u5728\u3059\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"MiniMax \u6cd5(\u6df1\u3055 2 \u307e\u3067)\u3068\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(\u5404\u8a66\u884c\u56de\u6570 20 \u56de)\u3067 100 \u56de\u306e\u5bfe\u6226\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u306a\u3063\u305f"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u52dd\u5229\u6570"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(\u5404\u8a66\u884c\u56de\u6570 20 \u56de)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"25"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u6df1\u3055 2)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"74"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"MiniMax \u6cd5(\u6df1\u3055 2 \u307e\u3067)\u3068\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(\u5404\u8a66\u884c\u56de\u6570 200 \u56de)\u3067 100 \u56de\u306e\u5bfe\u6226\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u306a\u3063\u305f\u3002"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u52dd\u5229\u6570"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u539f\u59cb\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(\u5404\u8a66\u884c\u56de\u6570 200 \u56de)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"28"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u6df1\u3055 2)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"69"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"\u5c11\u3057\u3060\u3051\u52dd\u7387\u306f\u4e0a\u304c\u3063\u305f\u304c\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u624b\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u306e\u3067\u5287\u7684\u306b\u52dd\u7387\u304c\u4e0a\u6607\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002"}),"\n",(0,s.jsx)(n.h3,{id:"\u30b3\u30fc\u30c9",children:"\u30b3\u30fc\u30c9"}),"\n",(0,s.jsx)(n.h4,{id:"primitive_monte_carlo_action",children:"primitive_monte_carlo_action"}),"\n",(0,s.jsx)(n.p,{children:"\u53cd\u5fa9\u6df1\u5316\u3092\u5c0e\u5165\u3057\u3001\u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u5834\u5408\u306f\u63a2\u7d22\u3092\u505c\u6b62\u3057\u3001\u6642\u9593\u5185\u3067\u4e00\u756a\u826f\u3044\u624b\u3092\u9078\u629e\u3059\u308b\u69d8\u306b\u3057\u3066\u3044\u308b\u3002"}),"\n",(0,s.jsxs)(i.Z,{groupId:"code",children:[(0,s.jsx)(l.Z,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="primitive_monte_carlo_action.py"',children:"from lib.evaluation import *\nfrom .action import Action\nfrom lib.othello import Othello, GameState\nimport sys\nfrom pathlib import Path\nimport random\nimport time\nsys.path.append(str(Path(__file__).parent.parent.parent))\n\n\nclass PrimitiveMonteCarloAction(Action):\n\n    def __init__(self, id: int, max_count: int, max_time: float, depth: int = -1) -> None:\n        super().__init__(id)\n        self.max_count = max_count\n        self.max_time = max_time\n        self.max_depth = depth\n\n    def action(self, othello: Othello):\n        next_action = self.primitive_monte_carlo(othello)\n        if next_action == ():\n            return None\n        return next_action\n\n    def primitive_monte_carlo(self, othello: Othello):\n        actions = othello.legal_actions(self.id)\n        if len(actions) == 0:\n            return ()\n        end_time = time.time() + self.max_time\n        count = 0\n        # \u52dd\u5229 1 \u5f15\u304d\u5206\u3051 0.5, \u8ca0\u3051 0\n        # [\u30dd\u30a4\u30f3\u30c8\u6570, \u56de\u6570] \u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u7ba1\n        action_result = [[0, 0] for _ in range(len(actions))]\n        max_count = max(self.max_count, len(actions))\n        win_id = GameState.WHITE_WIN.name if self.id == 0 else GameState.BLACK_WIN.name\n        while count < max_count and time.time() < end_time:\n            next_board = othello.copy_board()\n            next_board.put(self.id, actions[count % len(actions)])\n            result: str = self.simulate(next_board)\n            if result == win_id:\n                action_result[count % len(action_result)][0] += 1\n            elif result == GameState.DRAW:\n                action_result[count % len(action_result)][0] += 0.5\n            action_result[count % len(action_result)][1] += 1\n            count += 1\n        idx = 0\n        max_ = action_result[0][0] / action_result[0][1]\n        for i in range(1, len(action_result)):\n            if action_result[i][1] == 0:\n                continue\n            evl = action_result[i][0] / action_result[i][1]\n            if max_ < evl:\n                idx = i\n                max_ = evl\n        return actions[idx]\n\n    def simulate(self, othello: Othello):\n        play_id = self.id ^ 1\n        # \u6700\u5927\u306e\u6df1\u3055\u304c0\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u30b2\u30fc\u30e0\u7d42\u4e86\u307e\u3067\u884c\u3046\n        if self.max_depth <= 0:\n            while not othello.is_done():\n                actions = othello.legal_actions(play_id)\n                if len(actions) == 0:\n                    play_id ^= 1\n                    continue\n                action = random.choice(actions)\n                othello.put(play_id, action)\n                play_id ^= 1\n            return othello.get_winner().name\n        else:\n            depth = 0\n            while not othello.is_done() and depth <= self.max_depth:\n                actions = othello.legal_actions(play_id)\n                if len(actions) == 0:\n                    play_id ^= 1\n                    continue\n                action = random.choice(actions)\n                othello.put(play_id, action)\n                play_id ^= 1\n                depth += 1\n            result = othello.get_count()\n            if result[0] < result[1]:\n                return GameState.BLACK_WIN.name\n            elif result[0] > result[1]:\n                return GameState.WHITE_WIN.name\n            return GameState.DRAW.name\n\n"})})}),(0,s.jsxs)(l.Z,{value:"C++",label:"C++",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="primitive_monte_carlo_action.hpp"',children:'#ifndef PRIMITIVEMONTECARLOACTION_H\n#define PRIMITIVEMONTECARLOACTION_H\n\n#include <utility> // pair\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n#include "../othello.hpp"\n#include "action.hpp"\n#include <string>\nusing namespace std;\n\nclass PrimitiveMonteCarloAction : public Action\n{\npublic:\n    PrimitiveMonteCarloAction(int id, int maxCount, int maxTimeInMilliseconds, int depth = -1);\n\n    optional<pair<int, int>> action(Othello othello);\n\nprivate:\n    int maxCount;\n    int maxTimeInMilliseconds;\n    int maxDepth;\n\n    pair<int, int> primitiveMonteCarlo(Othello othello);\n    string simulate(Othello othello);\n    int randCalc(const vector<pair<int, int>> &actions);\n};\n#endif // PRIMITIVEMONTECARLOACTION_H\n\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="primitive_monte_carlo_action.cpp"',children:'#include "../othello.hpp" // othello.h \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\n#include "action.hpp"     // action.h \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\n#include "primitive_monte_carlo_action.hpp"\n#include <chrono>\n#include <random>\n#include <optional>\n#include <vector> // vector\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nPrimitiveMonteCarloAction::PrimitiveMonteCarloAction(int id, int maxCount, int maxTimeInMilliseconds, int depth)\n    : Action(id), maxCount(maxCount), maxTimeInMilliseconds(maxTimeInMilliseconds), maxDepth(depth)\n{\n}\n\noptional<pair<int, int>> PrimitiveMonteCarloAction::action(Othello othello)\n{\n    pair<int, int> next_action = primitiveMonteCarlo(othello);\n    if (next_action == make_pair(-1, -1))\n    {\n        return nullopt;\n    }\n    return next_action;\n}\n\npair<int, int> PrimitiveMonteCarloAction::primitiveMonteCarlo(Othello othello)\n{\n    std::vector<std::pair<int, int>> actions = othello.legalActions(this->id);\n    if (actions.empty())\n    {\n        return make_pair(-1, -1);\n    }\n    auto startTime = chrono::high_resolution_clock::now();\n    auto endTime = startTime + chrono::milliseconds(maxTimeInMilliseconds);\n    int count = 0;\n\n    vector<pair<double, int>> actionResult(actions.size(), {0, 0});\n\n    string win_id = this->id == 0 ? "White Win" : "Black Win";\n\n    while (count < maxCount && chrono::high_resolution_clock::now() < endTime)\n    {\n        Othello next_board = othello;\n        next_board.put(this->id, actions[count % actions.size()]);\n        string result = simulate(next_board);\n        if (result == win_id)\n        {\n            actionResult[count % actionResult.size()].first += 1;\n        }\n        else if (result == "Draw")\n        {\n            actionResult[count % actionResult.size()].first += 0.5;\n        }\n\n        actionResult[count % actionResult.size()].second += 1;\n        count += 1;\n    }\n\n    int idx = 0;\n    double max_ = actionResult[0].first / actionResult[0].second;\n\n    for (int i = 1; i < actionResult.size(); ++i)\n    {\n        if (actionResult[i].second == 0)\n        {\n            continue;\n        }\n\n        double evl = actionResult[i].first / actionResult[i].second;\n\n        if (max_ < evl)\n        {\n            idx = i;\n            max_ = evl;\n        }\n    }\n    return actions[idx];\n}\n\nstring PrimitiveMonteCarloAction::simulate(Othello othello)\n{\n    int play_id = this->id ^ 1;\n\n    if (maxDepth <= 0)\n    {\n        while (!othello.isDone())\n        {\n            vector<pair<int, int>> actions = othello.legalActions(play_id);\n\n            if (actions.empty())\n            {\n                play_id ^= 1;\n                continue;\n            }\n\n            int random_index = randCalc(actions);\n            othello.put(play_id, actions[random_index]);\n            play_id ^= 1;\n        }\n\n        return othello.getWinner();\n    }\n    else\n    {\n        int depth = 0;\n\n        while (!othello.isDone() && depth < maxDepth)\n        {\n            std::vector<std::pair<int, int>> actions = othello.legalActions(play_id);\n\n            if (actions.empty())\n            {\n                play_id ^= 1;\n                continue;\n            }\n\n            int random_index = randCalc(actions);\n            othello.put(play_id, actions[random_index]);\n            play_id ^= 1;\n            depth += 1;\n        }\n\n        std::pair<int, int> result = othello.getCount();\n\n        if (result.first < result.second)\n        {\n            return "Black Win";\n        }\n        else if (result.first > result.second)\n        {\n            return "White Win";\n        }\n\n        return "Draw";\n    }\n}\n\nint PrimitiveMonteCarloAction::randCalc(const vector<pair<int, int>> &actions)\n{\n    random_device rd;\n    mt19937 gen(rd());\n    uniform_int_distribution<int> dist(0, actions.size() - 1);\n    return dist(gen);\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h4,{id:"\u5909\u66f4",children:"\u5909\u66f4"}),"\n",(0,s.jsx)(n.h5,{id:"player",children:"player"}),"\n",(0,s.jsxs)(i.Z,{groupId:"code",children:[(0,s.jsx)(l.Z,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="player.py"  {20-21}',children:'from lib.othello import Othello\nfrom lib.actions import *\n\n\nclass Player():\n\n    def __init__(self, _id: int, board: Othello, strategy: str, depth=2, evaluation: str = "mass_count", max_time: int = 1, max_count=100) -> None:\n        self.id = _id\n        self.othello = board\n        # \u6b21\u306e\u624b\u3092\u9078\u629e\u3059\u308b\u624b\u6cd5\u3092\u8fd4\u308b\n        match strategy:\n            case "random":\n                self.strategy = RandomAction(_id)\n            case "minimax":\n                self.strategy = MiniMaxAction(_id, depth, evaluation)\n            case "alpha_beta":\n                self.strategy = AlphaBetaAction(_id, depth, evaluation)\n            case "iterative_deepening_alpha_beta":\n                self.strategy = IterativeDeepeningAlphaBetaAction(_id, depth, evaluation, max_time)\n            case "primitive_monte_carlo":\n                self.strategy = PrimitiveMonteCarloAction(_id, max_count, max_time, depth)\n            case _:\n                self.strategy = RandomAction(_id)\n'})})}),(0,s.jsx)(l.Z,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="player.cpp"  {8,36-37}',children:'#include "othello.hpp"\n#include "evaluation.hpp"\n#include "action/action.hpp"\n#include "action/random_action.hpp"\n#include "action/mini_max_action.hpp"\n#include "action/alpha_beta_action.hpp"\n#include "action/iterative_deepening_alpha_beta_action.hpp"\n#include "action/primitive_monte_carlo_action.hpp"\n\n#include <memory>  // unique_ptr\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n#include <vector>  // vector\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n#include <utility> // pair\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\n#include <iostream>\n#include <typeinfo>\n\n#include "player.hpp"\nusing namespace std;\nPlayer::Player(int _id, Othello &_othello, const Strategy strategy, int depth, int maxTime, int maxCount, Evaluation evaluation) : id(_id), othello(_othello)\n{\n    id = _id;\n\n    switch (strategy)\n    {\n    case Strategy::RANDOM:\n        this->strategy = make_unique<RandomAction>(_id);\n        break;\n    case Strategy::MINIMAX:\n        this->strategy = make_unique<MiniMaxAction>(_id, depth, evaluation);\n        break;\n    case Strategy::ALPHABETA:\n        this->strategy = make_unique<AlphaBetaAction>(_id, depth, evaluation);\n        break;\n    case Strategy::ITERATIVE_DEEPENING_ALPHA_BETA:\n        this->strategy = make_unique<IterativeDeepeningAlphaBetaAction>(_id, depth, maxTime, evaluation);\n        break;\n    case Strategy::PRIMITIVE_MONTE_CARLO:\n        this->strategy = make_unique<PrimitiveMonteCarloAction>(_id, maxCount, maxTime, depth);\n        break;\n    default:\n        this->strategy = make_unique<RandomAction>(_id);\n        break;\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.h5,{id:"c\u3060\u3051",children:"c++\u3060\u3051"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"makefile"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-makefile",children:"# \u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u30aa\u30d7\u30b7\u30e7\u30f3\nCXX = g++\nCXXFLAGS =\n\nOUT_PATH = ./out\n\n# \u30bf\u30fc\u30b2\u30c3\u30c8: \u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\nothello: $(OUT_PATH)/main.o $(OUT_PATH)/othello.o $(OUT_PATH)/evaluation.o $(OUT_PATH)/action.o $(OUT_PATH)/random_action.o $(OUT_PATH)/mini_max_action.o $(OUT_PATH)/alpha_beta_action.o $(OUT_PATH)/iterative_deepening_alpha_beta_action.o $(OUT_PATH)/primitive_monte_carlo_action.o $(OUT_PATH)/player.o\n    $(CXX) $(CXXFLAGS) $^ -o othello\n\n# \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\n$(OUT_PATH)/othello.o: lib/othello.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/evaluation.o: lib/evaluation.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/action.o: lib/action/action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/random_action.o: lib/action/random_action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/mini_max_action.o: lib/action/mini_max_action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/alpha_beta_action.o: lib/action/alpha_beta_action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/iterative_deepening_alpha_beta_action.o: lib/action/iterative_deepening_alpha_beta_action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/primitive_monte_carlo_action.o: lib/action/primitive_monte_carlo_action.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/player.o: lib/player.cpp\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n$(OUT_PATH)/main.o: main.cpp $(OUT_PATH)\n    $(CXX) $(CXXFLAGS) -c $< -o $@\n\n# OUT_PATH\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u4f5c\u6210\u3059\u308b\n$(OUT_PATH):\n    mkdir -p $(OUT_PATH)\n\n\n.PHONY: clean\n\nclean:\n    rm -f $(OUT_PATH)/*.o\n\nrun:\n    ./othello\n\ng++:\n    g++ main.cpp lib/othello.cpp lib/evaluation.cpp lib/action/action.cpp lib/action/random_action.cpp lib/action/mini_max_action.cpp lib/action/alpha_beta_action.cpp lib/action/iterative_deepening_alpha_beta_action.cpp lib/action/primitive_monte_carlo_action.cpp lib/player.cpp -o ./othello\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"action.hpp"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"enum class Strategy\n{\n    RANDOM,\n    MINIMAX,\n    ALPHABETA,\n    ITERATIVE_DEEPENING_ALPHA_BETA,\n    PRIMITIVE_MONTE_CARLO\n};\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>l});t(67294);var s=t(36905);const a={tabItem:"tabItem_Ymn6"};var i=t(85893);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.Z)(a.tabItem,l),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>b});var s=t(67294),a=t(36905),i=t(12466),l=t(16550),r=t(20469),c=t(91980),o=t(67392),d=t(50012);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[l,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[o,h]=u({queryString:t,groupId:a}),[x,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),j=(()=>{const e=o??x;return p({value:e,tabValues:i})?e:null})();(0,r.Z)((()=>{j&&c(j)}),[j]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),_(e)}),[h,_,i]),tabValues:i}}var _=t(72389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(85893);function y(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=r[t].value;a!==s&&(o(n),l(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...i,className:(0,a.Z)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function f(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,a.Z)("tabs-container",j.tabList),children:[(0,g.jsx)(y,{...e,...n}),(0,g.jsx)(v,{...e,...n})]})}function b(e){const n=(0,_.Z)();return(0,g.jsx)(f,{...e,children:h(e.children)},String(n))}},60679:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/primitive-monte-carlo-1.drawio-3638b00e03bbf8978eb210e87c88d3a9.svg"},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var s=t(67294);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);