"use strict";(self.webpackChunkstudy_doxs=self.webpackChunkstudy_doxs||[]).push([[3112],{38107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var s=t(85893),a=t(11151),i=t(74866),l=t(85162);const r={title:"MiniMax\u6cd5",sidebar_label:"MiniMax\u6cd5",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]},c=void 0,o={id:"Search-Algorithm/alternate-move-game/mini-max",title:"MiniMax\u6cd5",description:"MiniMax \u6cd5\u3068\u306f",source:"@site/docs/04-Search-Algorithm/20-alternate-move-game/01-mini-max.md",sourceDirName:"04-Search-Algorithm/20-alternate-move-game",slug:"/Search-Algorithm/alternate-move-game/mini-max",permalink:"/study-docs/docs/Search-Algorithm/alternate-move-game/mini-max",draft:!1,unlisted:!1,editUrl:"https://github.com/koseki2580/study-docs/edit/main/docs/04-Search-Algorithm/20-alternate-move-game/01-mini-max.md",tags:[{label:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/tags/\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}],version:"current",lastUpdatedBy:"koseki2580",lastUpdatedAt:1699013650,formattedLastUpdatedAt:"2023\u5e7411\u67083\u65e5",sidebarPosition:1,frontMatter:{title:"MiniMax\u6cd5",sidebar_label:"MiniMax\u6cd5",draft:!1,toc_max_heading_level:4,tags:["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]},sidebar:"Search-AlgorithmSidebar",previous:{title:"\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",permalink:"/study-docs/docs/Search-Algorithm/at-first"}},d={},h=[{value:"MiniMax \u6cd5\u3068\u306f",id:"minimax-\u6cd5\u3068\u306f",level:2},{value:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",id:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",level:3},{value:"\u30b3\u30fc\u30c9",id:"\u30b3\u30fc\u30c9",level:3}];function m(e){const n={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h2:"h2",h3:"h3",img:"img",math:"math",mn:"mn",mo:"mo",mover:"mover",mrow:"mrow",mstyle:"mstyle",mtext:"mtext",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"minimax-\u6cd5\u3068\u306f",children:"MiniMax \u6cd5\u3068\u306f"}),"\n",(0,s.jsx)(n.p,{children:"\u30b2\u30fc\u30e0\u306e\u9032\u884c\u4e2d\u306b\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u6700\u9069\u306a\u624b\u3092\u9078\u3076\u305f\u3081\u306b\u3001\u76f8\u624b\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u6700\u60aa\u306e\u624b(\u9078\u3070\u308c\u305f\u304f\u306a\u3044\u624b)\u3092\u9078\u3076\u3068\u4eee\u5b9a\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067\u81ea\u5206\u306b\u3068\u3063\u3066\u6700\u826f\u306a\u624b\u3092\u9078\u629e\u3057\u3066\u3044\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3002\n\u63a2\u7d22\u3059\u308b\u969b\u306b\u306f\u30b2\u30fc\u30e0\u6728\u3092\u69cb\u7bc9\u3057\u3001\u30ce\u30fc\u30c9\u3092\u4f55\u3089\u304b\u306e\u8a55\u4fa1\u3057\u3088\u3046\u306b\u57fa\u3065\u3044\u3066\u8a55\u4fa1\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u884c\u52d5\u304c\u3044\u3044\u884c\u52d5\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u304f\u3002"}),"\n",(0,s.jsx)(n.h3,{id:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0",children:"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}),"\n",(0,s.jsx)(n.p,{children:"\u30aa\u30bb\u30ed\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u76e4\u9762\u3092\u8003\u3048\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed1",src:t(70202).Z+"",width:"324",height:"324"})}),"\n",(0,s.jsx)(n.p,{children:"\u767d\u304c\u6b21\u306b\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30b9\u306b\u306f\u8272\u3092\u3064\u3051\u3066\u3044\u308b\u3002\nMiniMax \u6cd5\u3067\u306f\u6b21\u306b\u7f6e\u304f\u4f4d\u7f6e\u6c7a\u3081\u308b\u305f\u3081\u306b\u30b2\u30fc\u30e0\u6728\u3092\u7528\u3044\u308b\u3002\u30b2\u30fc\u30e0\u6728\u3068\u306f\u30b2\u30fc\u30e0\u306e\u9032\u884c\u72b6\u6cc1\u3084\u53ef\u80fd\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4eca\u56de\u306e\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306a\u30b2\u30fc\u30e0\u6728\u3068\u306a\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed2",src:t(66153).Z+"",width:"2124",height:"724"})}),"\n",(0,s.jsx)(n.p,{children:"\u4eca\u56de\u306f\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30b9\u304c 6 \u500b\u3042\u308b\u305f\u3081\u5b50\u30ce\u30fc\u30c9\u304c 6 \u672c\u3067\u304d\u308b\u3002\u3053\u306e 6 \u672c\u304c\u767d\u304c\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u884c\u52d5\u3067\u3042\u308b\u3002\n\u7d9a\u3051\u3066\u9ed2\u304c\u884c\u52d5\u3059\u308b\u624b\u756a\u3068\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u30ce\u30fc\u30c9\u306b\u9ed2\u304c\u53d6\u308c\u308b\u624b\u3092\u793a\u3059\u3068\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed3",src:t(66313).Z+"",width:"2124",height:"724"})}),"\n",(0,s.jsx)(n.p,{children:"\u9ed2\u306e\u624b\u756a\u3082\u30b2\u30fc\u30e0\u6728\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308b\u3002(1 \u3064\u306b\u307e\u3068\u3081\u308b\u3068\u56f3\u304c\u5c0f\u3055\u304f\u306a\u308a\u898b\u3065\u3089\u304f\u306a\u308b\u305f\u3081\u3001\u5b50\u30ce\u30fc\u30c9\u3092\u5225\u3005\u306b\u6728\u3068\u3057\u3066\u8868\u73fe\u3059\u308b\u3002)\n\u307e\u305f\u3001\u4eca\u56de\u306f\u8a55\u4fa1\u95a2\u6570\u3068\u3057\u3066\u30b3\u30de\u306e\u6570\u3067\u52dd\u6557\u304c\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3001\u99d2\u306e\u6570\u3067\u8a55\u4fa1\u3059\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u767d\u5074\u306e\u8a55\u4fa1\u95a2\u6570"}),"\n",(0,s.jsx)(n.span,{className:"katex-display",children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mtext,{children:"\u767d\u306e\u30de\u30b9\u306e\u6570"}),(0,s.jsx)(n.mo,{children:"\u2212"}),(0,s.jsx)(n.mtext,{children:"\u9ed2\u306e\u30de\u30b9\u306e\u6570"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\u767d\u306e\u30de\u30b9\u306e\u6570 - \u9ed2\u306e\u30de\u30b9\u306e\u6570"})]})})}),(0,s.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.7667em",verticalAlign:"-0.0833em"}}),(0,s.jsx)(n.span,{className:"mord cjk_fallback",children:"\u767d\u306e\u30de\u30b9\u306e\u6570"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,s.jsx)(n.span,{className:"mord cjk_fallback",children:"\u9ed2\u306e\u30de\u30b9\u306e\u6570"})]})]})]})}),"\n",(0,s.jsx)(n.p,{children:"\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u81ea\u5206\u306b\u6709\u5229\u306a\u624b\u3067\u3042\u308a\u3001\u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u76f8\u624b\u306b\u6709\u5229\u306a\u624b\u3067\u3042\u308b\u3068\u5224\u65ad\u3059\u308b\u3002\n\u9ed2\u306e\u624b\u756a\u7d42\u4e86\u5f8c\u306e\u8a55\u4fa1\u95a2\u6570\u306e\u7d50\u679c\u3082\u5408\u308f\u305b\u3066\u66f8\u3044\u3066\u3044\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed4",src:t(42601).Z+"",width:"1964",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed5",src:t(88673).Z+"",width:"1444",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed6",src:t(8797).Z+"",width:"1444",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed7",src:t(4578).Z+"",width:"2484",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed8",src:t(32656).Z+"",width:"1444",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed9",src:t(1132).Z+"",width:"2164",height:"1163"})}),"\n",(0,s.jsx)(n.p,{children:"\u5404\u9ed2\u306e\u624b\u756a\u5f8c\u306e\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306f\u4ee5\u4e0b\u3068\u306a\u308b\u3002\u6df1\u3055 1 \u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u5de6\u304b\u3089 1 \u756a\u3068\u3059\u308b\u3002"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u756a\u53f7"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u6700\u5927\u5024"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u6700\u5c0f\u5024"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"1"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 1}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"1"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"2"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 2}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"2"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"3"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 3}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"3"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"4"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 4}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"4"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"5"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 5}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"5"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"2"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsxs)(n.mover,{accent:"true",children:[(0,s.jsx)(n.mstyle,{mathsize:"0.7em",children:(0,s.jsx)(n.mn,{children:"6"})}),(0,s.jsx)(n.mo,{children:"\u25ef"})]})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\textcircled{\\scriptsize 6}"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em"}}),(0,s.jsx)(n.span,{className:"mord accent",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsxs)(n.span,{className:"vlist",style:{height:"0.8889em"},children:[(0,s.jsxs)(n.span,{style:{top:"-3em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"mord",children:(0,s.jsx)(n.span,{className:"mord sizing reset-size6 size3",children:"6"})})]}),(0,s.jsxs)(n.span,{style:{top:"-3.1944em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(n.span,{className:"accent-body accent-full",style:{left:"0em",top:".2em"},children:(0,s.jsx)(n.span,{className:"mord",children:"\u25ef"})})]})]})})})})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"0"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-2"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"\u3068\u306a\u308b\u3002MiniMax \u6cd5\u3067\u306f\u76f8\u624b\u306f\u81ea\u5206\u306b\u3068\u3063\u3066\u6700\u60aa\u306e\u624b\u3092\u6253\u3063\u3066\u304f\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u6df1\u3055 1 \u306e\u30ce\u30fc\u30c9\u306e\u5404\u5b50\u30ce\u30fc\u30c9\u306e\u6700\u4f4e\u5024\u3068\u306a\u308b\u624b\u3092\u6253\u3063\u3066\u304f\u308b\u3068\u60f3\u5b9a\u3059\u308b\u3002\n\u3064\u307e\u308a\u3001\u6df1\u3055 2 \u3067\u3044\u304f\u3064\u304b\u306e\u5b50\u30ce\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304c\u305d\u306e\u4e2d\u3067\u6700\u5c0f\u306e\u5024\u3092\u53d6\u308b\u9078\u629e\u3092\u76f8\u624b\u304c\u3057\u3066\u304f\u308b\u3068\u8003\u3048\u308b\u306e\u3067\u30b2\u30fc\u30e0\u6728\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed10",src:t(25495).Z+"",width:"2124",height:"1163"})}),"\n",(0,s.jsxs)(n.p,{children:["\u6b21\u306b\u6df1\u3055 1 \u306b\u3042\u308b\u5b50\u30ce\u30fc\u30c9\u304b\u3089\u3069\u308c\u304b\u4e00\u624b\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6df1\u3055 1 \u306e\u6c7a\u5b9a\u3059\u308b\u306e\u306f\u81ea\u5206(\u767d)\u3067\u3042\u308b\u305f\u3081\u3001\u81ea\u5206\u306b\u3068\u3063\u3066\u6700\u9069\u3068\u306a\u308b\u624b\u3092\u9078\u629e\u3059\u308b\u3002\u3053\u3053\u3067\u3044\u3046\u6700\u9069\u3068\u3044\u3046\u306f\u8a55\u4fa1\u95a2\u6570\u306e\u5024\u304c\u4e00\u756a\u5927\u304d\u3044\u5024\u3067\u3042\u308b\u3002\u305d\u306e\u305f\u3081",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mn,{children:"5"}),(0,s.jsx)(n.mo,{children:"\u2212"}),(0,s.jsx)(n.mn,{children:"5"}),(0,s.jsx)(n.mo,{children:"="}),(0,s.jsx)(n.mn,{children:"0"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"5 - 5 = 0"})]})})}),(0,s.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.jsx)(n.span,{className:"mord",children:"5"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,s.jsx)(n.span,{className:"mord",children:"5"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"="}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,s.jsx)(n.span,{className:"mord",children:"0"})]})]})]}),"\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u8a55\u4fa1\u95a2\u6570\u304c\u6700\u5927\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5de6\u304b\u3089 4 \u756a\u76ee\u306e\u624b\u3092\u9078\u629e\u3059\u308b\u5224\u65ad\u306b\u306a\u308b\u3002"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"\u30aa\u30bb\u30ed11",src:t(63139).Z+"",width:"846",height:"1163"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u69d8\u306b\u76f8\u624b\u306f\u81ea\u5206\u306b\u3068\u3063\u3066\u6700\u60aa\u306e\u624b(\u8a55\u4fa1\u95a2\u6570\u304c\u4e00\u756a\u4f4e\u304f\u306a\u308b)\u3092\u9078\u629e\u3057\u3066\u304f\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3001\u81ea\u5206\u306e\u624b\u3092\u6700\u9069(\u8a55\u4fa1\u95a2\u6570\u304c\u4e00\u756a\u9ad8\u304f\u306a\u308b)\u306b\u306a\u308b\u3088\u3046\u306b\u63a2\u7d22\u3057\u3066\u3044\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c",(0,s.jsx)(n.code,{children:"MiniMax"}),"\u6cd5\u3067\u3042\u308b\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u8a55\u4fa1\u95a2\u6570\u6b21\u7b2c\u3067\u53d6\u308b\u624b\u304c\u5909\u308f\u3063\u3066\u304f\u308b\u305f\u3081\u3001\u8a55\u4fa1\u95a2\u6570\u306e\u8a2d\u5b9a\u304c\u3068\u3066\u3082\u5927\u5207\u306b\u306a\u3063\u3066\u304f\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4eca\u56de\u306f\u4e0a\u8a18\u306e\u69d8\u306b\u99d2\u306e\u6570\u3092\u8a55\u4fa1\u95a2\u6570\u306b\u3059\u308b\u3082\u306e\u3068\u30aa\u30bb\u30ed\u306f\u89d2\u3092\u53d6\u308b\u3053\u3068\u304c\u4e00\u822c\u7684\u306b\u5f37\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u89d2\u306b\u99d2\u3092\u914d\u7f6e\u3057\u305f\u308a\u3001\u8fba\u306b\u914d\u7f6e\u3057\u305f\u308a\u3068\u3044\u3063\u305f\u69d8\u3005\u306a\u8981\u7d20\u304b\u3089\u8a55\u4fa1\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u8a55\u4fa1\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"MiniMax \u6cd5\u306e\u305d\u308c\u305e\u308c\u306e\u8a55\u4fa1\u95a2\u6570\u3068\u30e9\u30f3\u30c0\u30e0\u9078\u629e\u306e 3 \u3064\u306e\u6226\u7565\u3067\u30e9\u30f3\u30c0\u30e0\u9078\u629e\u306e\u76f8\u624b\u3068 1000 \u56de\u5bfe\u6226\u3057\u305f\u52dd\u5229\u7387\u306f\u4ee5\u4e0b\u3067\u3042\u3063\u305f\u3002"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u767d\u306e\u5834\u5408"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u9078\u629e\u6226\u7565"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u52dd\u7387(\u5bfe\u30e9\u30f3\u30c0\u30e0\u9078\u629e)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u30e9\u30f3\u30c0\u30e0\u9078\u629e"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"51%"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u99d2\u306e\u500b\u6570\u8a55\u4fa1)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"73%"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u30ab\u30b9\u30bf\u30e0\u8a55\u4fa1)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"95%"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u9ed2\u306e\u5834\u5408"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u9078\u629e\u6226\u7565"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u52dd\u7387(\u5bfe\u30e9\u30f3\u30c0\u30e0\u9078\u629e)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u30e9\u30f3\u30c0\u30e0\u9078\u629e"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"45%"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u99d2\u306e\u500b\u6570\u8a55\u4fa1)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"62%"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"MiniMax \u6cd5(\u30ab\u30b9\u30bf\u30e0\u8a55\u4fa1)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"92%"})]})]})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"MiniMax \u6cd5\u540c\u58eb\u3092\u5bfe\u6c7a\u3059\u308b\u3068\u304a\u4e92\u3044\u306b\u540c\u3058\u9078\u629e\u3092\u3057\u306a\u3044\u305f\u3081\u3001\u4f55\u56de\u7e70\u308a\u8fd4\u3057\u3066\u3082\u540c\u3058\u306b\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081(\u52dd\u5229\u7387 100% or 0%)\u3001\u8868\u8a18\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002"})}),"\n",(0,s.jsx)(n.h3,{id:"\u30b3\u30fc\u30c9",children:"\u30b3\u30fc\u30c9"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/Search-Algorithm/at-first",children:"\u63a2\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"}),"\u306e\u7bc0\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u306b\u8ffd\u52a0\u30fb\u5909\u66f4\u3059\u308b\u90e8\u5206\u306e\u307f\u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n(\u5909\u66f4\u304c\u3042\u308b\u5834\u5408\u306f\u95a2\u6570\u30fb\u30af\u30e9\u30b9\u5358\u4f4d\u3067\u8f09\u305b\u3066\u3044\u308b\u306e\u3067\u4e38\u3054\u3068\u5909\u66f4\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002)"]})}),"\n",(0,s.jsxs)(i.Z,{groupId:"code",children:[(0,s.jsx)(l.Z,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="mini-max.py"',children:'class EvaluationFunction:\n    @staticmethod\n    def mass_count(othello: Othello, _id: int):\n        if _id == 0:\n            # \u81ea\u5206\u304c\u767d\u306a\u306e\u3067white - black\u3067\n            # \u8a55\u4fa1\u3059\u308b\n            _base = 1\n        else:\n            # \u81ea\u5206\u304c\u9ed2\u306a\u306e\u3067black - white\u3067\n            # \u8a55\u4fa1\u3059\u308b\n            _base = -1\n        white, black = othello.get_count()\n        return (white - black) * _base\n\n    @staticmethod\n    def custom_evaluation(othello: Othello, _id: int):\n        # \u30b2\u30fc\u30e0\u30dc\u30fc\u30c9\u306e\u72b6\u614b\u3092\u53d6\u5f97\n        board = othello.board\n\n        # \u5404\u8981\u7d20\u306e\u91cd\u307f\u4ed8\u3051\n        corner_weight = 10\n        edge_weight = 5\n        mobility_weight = 2\n        parity_weight = 1\n\n        # \u8a55\u4fa1\u5024\u306e\u521d\u671f\u5316\n        evaluation = 0\n\n        # \u30b3\u30fc\u30ca\u30fc\u306e\u8a55\u4fa1\n        corner_value = 0\n        for i in [0, othello.map_size - 1]:\n            for j in [0, othello.map_size - 1]:\n                if board[i][j] == _id:\n                    corner_value += 1\n                elif board[i][j] == _id ^ 1:\n                    corner_value -= 1\n        evaluation += corner_weight * corner_value\n\n        # \u8fba\u306e\u8a55\u4fa1\n        edge_value = 0\n        for i in range(othello.map_size):\n            for j in [0, othello.map_size - 1]:\n                # \u7e26\u306e\u8fba\n                if board[i][j] == _id:\n                    edge_value += 1\n                elif board[i][j] == _id ^ 1:\n                    edge_value -= 1\n\n                # \u6a2a\u306e\u8fba\n                if board[j][i] == _id:\n                    edge_value += 1\n                elif board[j][i] == _id ^ 1:\n                    edge_value -= 1\n        evaluation += edge_weight * edge_value\n\n        # \u30e2\u30d3\u30ea\u30c6\u30a3\u306e\u8a55\u4fa1\n        mobility_value = len(othello.legal_actions(_id)) - \\\n            len(othello.legal_actions(_id ^ 1))\n        evaluation += mobility_weight * mobility_value\n\n        # \u30d1\u30ea\u30c6\u30a3\u306e\u8a55\u4fa1\n        # \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u77f3\u306e\u6570\u3092\u53d6\u5f97\n        white, black = othello.get_count()\n        if _id == 1:\n            _base = -1\n        else:\n            _base = 1\n        parity_value = 0\n        if white > black:\n            parity_value = 1\n        elif white < black:\n            parity_value = -1\n        evaluation += parity_weight * parity_value * _base\n\n        return evaluation\n\n\nclass MiniMaxAction(Action):\n\n    def __init__(self, id: int, depth: int, evaluation: str) -> None:\n        super().__init__(id)\n        self.depth = depth\n        match evaluation:\n            case "mass_count":\n                self.evaluation = EvaluationFunction.mass_count\n            case "custom":\n                self.evaluation = EvaluationFunction.custom_evaluation\n            case _:\n                self.evaluation = EvaluationFunction.mass_count\n\n    def action(self, othello: Othello):\n        _, next_action = self.mini_max(self.id, othello, 0)\n        if next_action == ():\n            return None\n        return next_action\n\n    def mini_max(self, _id: int, othello: Othello, now_depth: int):\n        if now_depth == self.depth:\n            # \u81ea\u5206\u304b\u3089\u898b\u3066\u306e\u8a55\u4fa1\u3092\u66f8\u304f\n            return self.evaluation(othello, self.id), ()\n        # _id\u306e\u624b\u756a\n        actions = othello.legal_actions(_id)\n\n        if now_depth & 1 == 1:\n            _base = -1\n        else:\n            _base = 1\n        next_put = ()\n        count = 10**10 * _base * -1\n        if len(actions) == 0:\n            # \u30b9\u30ad\u30c3\u30d7\u3055\u305b\u308b\u624b\u306f\u6700\u5927\u306e\u8a55\u4fa1\u306b\u3059\u308b\n            return count * -1, ()\n        for action in actions:\n            next_board = othello.copy_board()\n            next_board.put(_id, action)\n            value, _ = self.mini_max(_id ^ 1, next_board, now_depth + 1)\n            if _base * count <= _base * value:\n                next_put = action\n                count = value\n\n        return count, next_put\n\nclass Player():\n\n    def __init__(self, _id: int, board: Othello, strategy: str, depth=2, evaluation: str = "mass_count") -> None:\n        self.id = _id\n        self.othello = board\n        # \u6b21\u306e\u624b\u3092\u9078\u629e\u3059\u308b\u624b\u6cd5\u3092\u8fd4\u308b\n        match strategy:\n            case "random":\n                self.strategy = RandomAction(_id)\n            case "minimax":\n                self.strategy = MiniMaxAction(_id, depth, evaluation)\n            case _:\n                self.strategy = RandomAction(_id)\n\n    def put(self):\n        action = self.strategy.action(self.othello.copy_board())\n        # \u7f6e\u304f\u3068\u3053\u308d\u304c\u306a\u304b\u3063\u305f\u5834\u5408\n        if action is None:\n            return\n        self.othello.put(self.id, action)\n\ndef play_game(player1_strategy, player2_strategy):\n    # \u5bfe\u6226\u30de\u30c3\u30d7\u4f5c\u6210\n    othello = Othello()\n\n    # player\u3092\u4f5c\u6210\n    player1 = Player(0, othello, player1_strategy, 2, "custom")\n    player2 = Player(1, othello, player2_strategy)\n\n    # print(othello)\n    while (not othello.is_done()):\n        # player1\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n        player1.put()\n        # player2\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n        player2.put()\n    return othello.get_winner()\n\n\nn = 100\nwhite = 0\nblack = 0\ndraw = 0\nfor i in range(n):\n    win = play_game("minimax", "random")\n    print(f"{i}\u56de\u76ee: {win.value}")\n    if win == GameState.WHITE_WIN:\n        white += 1\n    elif win == GameState.BLACK_WIN:\n        black += 1\n    else:\n        draw += 1\n\nprint(f"\u767d\u306e\u52dd\u7387: {white/n}")\nprint(f"\u9ed2\u306e\u52dd\u7387: {black/n}")\nprint(f"\u5f15\u304d\u5206\u3051: {draw/n}")\n\n'})})}),(0,s.jsx)(l.Z,{value:"C++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="mini-max.cpp"',children:'enum class Strategy\n{\n    RANDOM,\n    MINIMAX\n};\nenum class Evaluation\n{\n    MASS_COUNT,\n    CUSTOM\n};\nclass EvaluationFunction\n{\npublic:\n    // \u9759\u7684\u30e1\u30bd\u30c3\u30c9\uff1a\u30de\u30b9\u30ab\u30a6\u30f3\u30c8\u8a55\u4fa1\n    static int massCount(Othello &othello, int _id)\n    {\n        // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e ID \u306b\u57fa\u3065\u3044\u3066\u30d9\u30fc\u30b9\u5024\u3092\u6c7a\u5b9a\n        int _base = (_id == 0) ? 1 : -1;\n        // \u767d\u3068\u9ed2\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u53d6\u5f97\n        std::pair<int, int> count = othello.getCount();\n        // \u8a55\u4fa1\u3092\u8a08\u7b97\u3057\u3066\u8fd4\u3059\n        return (count.first - count.second) * _base;\n    }\n\n    // \u9759\u7684\u30e1\u30bd\u30c3\u30c9\uff1a\u30ab\u30b9\u30bf\u30e0\u8a55\u4fa1\n    static int customEvaluation(Othello &othello, int _id)\n    {\n        // \u30b2\u30fc\u30e0\u30dc\u30fc\u30c9\u306e\u72b6\u614b\u3092\u53d6\u5f97\n        const std::vector<std::vector<int>> &board = othello.getBoard();\n\n        // \u5404\u8981\u7d20\u306e\u91cd\u307f\u4ed8\u3051\n        int cornerWeight = 10;\n        int edgeWeight = 5;\n        int mobilityWeight = 2;\n        int parityWeight = 1;\n\n        // \u8a55\u4fa1\u5024\u306e\u521d\u671f\u5316\n        int evaluation = 0;\n\n        // \u30b3\u30fc\u30ca\u30fc\u306e\u8a55\u4fa1\n        int cornerValue = 0;\n        for (int i : {0, othello.mapSize - 1})\n        {\n            for (int j : {0, othello.mapSize - 1})\n            {\n                if (board[i][j] == _id)\n                {\n                    cornerValue += 1;\n                }\n                else if (board[i][j] == (_id ^ 1))\n                {\n                    cornerValue -= 1;\n                }\n            }\n        }\n        evaluation += cornerWeight * cornerValue;\n\n        // \u8fba\u306e\u8a55\u4fa1\n        int edgeValue = 0;\n        for (int i = 0; i < othello.mapSize; i++)\n        {\n            for (int j : {0, othello.mapSize - 1})\n            {\n                // \u7e26\u306e\u8fba\n                if (board[i][j] == _id)\n                {\n                    edgeValue += 1;\n                }\n                else if (board[i][j] == (_id ^ 1))\n                {\n                    edgeValue -= 1;\n                }\n\n                // \u6a2a\u306e\u8fba\n                if (board[j][i] == _id)\n                {\n                    edgeValue += 1;\n                }\n                else if (board[j][i] == (_id ^ 1))\n                {\n                    edgeValue -= 1;\n                }\n            }\n        }\n        evaluation += edgeWeight * edgeValue;\n\n        // \u30e2\u30d3\u30ea\u30c6\u30a3\u306e\u8a55\u4fa1\n        int mobilityValue = othello.legalActions(_id).size() - othello.legalActions(_id ^ 1).size();\n        evaluation += mobilityWeight * mobilityValue;\n\n        // \u30d1\u30ea\u30c6\u30a3\u306e\u8a55\u4fa1\n        // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u77f3\u306e\u6570\u3092\u53d6\u5f97\n        std::pair<int, int> count = othello.getCount();\n        int _base = (_id == 1) ? -1 : 1;\n        int parityValue = 0;\n        if (count.first > count.second)\n        {\n            parityValue = 1;\n        }\n        else if (count.first < count.second)\n        {\n            parityValue = -1;\n        }\n        evaluation += parityWeight * parityValue * _base;\n\n        // \u6700\u7d42\u7684\u306a\u8a55\u4fa1\u3092\u8fd4\u3059\n        return evaluation;\n    }\n};\n\nclass MiniMaxAction : public Action\n{\npublic:\n    int depth;\n    std::function<int(Othello &, int)> evaluation;\n\n    MiniMaxAction(int id, int depth, const Evaluation evaluation) : Action(id), depth(depth)\n    {\n        // \u8a55\u4fa1\u95a2\u6570\u3092\u9078\u629e\n        switch (evaluation)\n        {\n        case Evaluation::MASS_COUNT:\n            this->evaluation = [](Othello &othello, int id)\n            {\n                return EvaluationFunction::massCount(othello, id);\n            };\n            break;\n        case Evaluation::CUSTOM:\n            this->evaluation = [](Othello &othello, int id)\n            {\n                return EvaluationFunction::customEvaluation(othello, id);\n            };\n            break;\n\n        default:\n            this->evaluation = [](Othello &othello, int id)\n            {\n                return EvaluationFunction::massCount(othello, id);\n            };\n            break;\n        }\n    }\n\n    std::optional<std::pair<int, int>> action(Othello othello) override\n    {\n        auto result = miniMax(this->id, othello, 0);\n        if (result.second == std::make_pair(-1, -1))\n        {\n            return std::nullopt;\n        }\n        return result.second;\n    }\n\n    std::pair<int, std::pair<int, int>> miniMax(int _id, Othello othello, int nowDepth)\n    {\n        if (nowDepth == depth)\n        {\n            // \u81ea\u5206\u304b\u3089\u898b\u305f\u8a55\u4fa1\u3092\u8a08\u7b97\u3059\u308b\n            return std::make_pair(evaluation(othello, this->id), std::make_pair(-1, -1));\n        }\n\n        std::vector<std::pair<int, int>> actions = othello.legalActions(_id);\n\n        int _base = (nowDepth & 1) == 1 ? -1 : 1;\n        std::pair<int, std::pair<int, int>> nextPut = std::make_pair(10\'000\'000 * _base * -1, std::make_pair(-1, -1));\n\n        if (actions.empty())\n        {\n            // \u30b9\u30ad\u30c3\u30d7\u3055\u305b\u308b\u624b\u306f\u6700\u5927\u306e\u8a55\u4fa1\u306b\u3059\u308b\n            return nextPut;\n        }\n\n        for (const auto &action : actions)\n        {\n            Othello next_board = othello.copyBoard();\n            next_board.put(_id, action);\n            std::pair<int, std::pair<int, int>> value = miniMax(_id ^ 1, next_board, nowDepth + 1);\n\n            if (_base * nextPut.first <= _base * value.first)\n            {\n                nextPut = std::make_pair(value.first, action);\n            }\n        }\n\n        return nextPut;\n    }\n};\n\nclass Player\n{\n\npublic:\n    Player(int _id, Othello &_othello, const Strategy strategy, int depth = 2, Evaluation evaluation = Evaluation::MASS_COUNT) : id(_id), othello(_othello)\n    {\n        id = _id;\n        switch (strategy)\n        {\n        case Strategy::RANDOM:\n            this->strategy = std::make_unique<RandomAction>(_id);\n            break;\n        case Strategy::MINIMAX:\n            this->strategy = std::make_unique<MiniMaxAction>(_id, depth, evaluation);\n            break;\n        default:\n            this->strategy = std::make_unique<RandomAction>(_id);\n            break;\n        }\n    }\n\n    void put()\n    {\n        std::optional<std::pair<int, int>> action = strategy->action(othello.copyBoard());\n        if (!action.has_value())\n        {\n            return;\n        }\n        othello.put(id, action.value());\n    }\n\nprivate:\n    int id;\n    Othello &othello;\n    std::unique_ptr<Action> strategy = nullptr;\n    int (Player::*action)(const std::vector<std::pair<int, int>> &);\n};\n\nstd::string playGame(const Strategy player1_strategy, const Strategy player2_strategy)\n{\n    Othello othello;\n\n    Player player1(0, othello, player1_strategy, 2, Evaluation::MASS_COUNT);\n    Player player2(1, othello, player2_strategy);\n\n    while (!othello.isDone())\n    {\n        player1.put();\n        player2.put();\n    }\n    return othello.getWinner();\n}\n\nint main()\n{\n    int n = 100;\n    int white = 0;\n    int black = 0;\n    int draw = 0;\n    for (int i = 0; i < n; ++i)\n    {\n        std::string win = playGame(Strategy::MINIMAX, Strategy::RANDOM);\n        printf("%d: %s\\n", i, win.c_str());\n\n        if (win == "White Win")\n            white++;\n        else if (win == "Black Win")\n            black++;\n        else\n            draw++;\n    }\n    printf("\u767d\u306e\u52dd\u7387: %0.5f\\n", (double)white / n);\n    printf("\u9ed2\u306e\u52dd\u7387: %0.5f\\n", (double)black / n);\n    printf("\u5f15\u304d\u5206\u3051: %0.5f", (double)draw / n);\n    return 0;\n}\n'})})})]})]})}function x(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>l});t(67294);var s=t(86010);const a={tabItem:"tabItem_Ymn6"};var i=t(85893);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.Z)(a.tabItem,l),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>v});var s=t(67294),a=t(86010),i=t(12466),l=t(16550),r=t(20469),c=t(91980),o=t(67392),d=t(50012);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,o.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function x(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[l,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!x({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[o,h]=u({queryString:t,groupId:a}),[p,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),g=(()=>{const e=o??p;return x({value:e,tabValues:i})?e:null})();(0,r.Z)((()=>{g&&c(g)}),[g]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(85893);function b(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=r[t].value;a!==s&&(o(n),l(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...i,className:(0,a.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function _(e){const n=p(e);return(0,y.jsxs)("div",{className:(0,a.Z)("tabs-container",g.tabList),children:[(0,y.jsx)(b,{...e,...n}),(0,y.jsx)(f,{...e,...n})]})}function v(e){const n=(0,j.Z)();return(0,y.jsx)(_,{...e,children:h(e.children)},String(n))}},70202:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-1.drawio-25b5932355358f43cb8631aa9599a0c7.svg"},25495:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-10.drawio-e055be8639bbe7fd68b43502e4d8e054.svg"},63139:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-11.drawio-41e61e077fce4e173677185e3d88c56b.svg"},66153:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-2.drawio-407ee579ae7b4f395b138d611cf040a2.svg"},66313:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-3.drawio-d9ac8d54b7f7d4c3534c03780073e1f0.svg"},42601:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-4.drawio-1ec2b8bccb00099e2876e1150ae24ca3.svg"},88673:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-5.drawio-ae689e8e2b9c164ed55ff726b5df159e.svg"},8797:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-6.drawio-c1573d1b00fb4861918f53b16b289b27.svg"},4578:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-7.drawio-72894a65028c4168030f4c9f4120c38d.svg"},32656:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-8.drawio-b3dad63e707f00ce5ca1a29595d0fbe6.svg"},1132:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/mini-max-9.drawio-29ae66bd900a2e297a66718931030512.svg"},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var s=t(67294);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);